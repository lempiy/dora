// Code generated by protoc-gen-go. DO NOT EDIT.
// source: prs.proto

/*
Package prs is a generated protocol buffer package.

It is generated from these files:
	prs.proto

It has these top-level messages:
	ParseRequest
	ParseResult
	ReplayData
	MovesMap
	Move
*/
package prs

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ParseRequest struct {
	ReplayUrl  string `protobuf:"bytes,1,opt,name=replayUrl" json:"replayUrl,omitempty"`
	PlayerId   uint64 `protobuf:"varint,2,opt,name=playerId" json:"playerId,omitempty"`
	MatchId    uint64 `protobuf:"varint,3,opt,name=matchId" json:"matchId,omitempty"`
	ReplaySalt uint64 `protobuf:"varint,4,opt,name=replaySalt" json:"replaySalt,omitempty"`
}

func (m *ParseRequest) Reset()                    { *m = ParseRequest{} }
func (m *ParseRequest) String() string            { return proto.CompactTextString(m) }
func (*ParseRequest) ProtoMessage()               {}
func (*ParseRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ParseRequest) GetReplayUrl() string {
	if m != nil {
		return m.ReplayUrl
	}
	return ""
}

func (m *ParseRequest) GetPlayerId() uint64 {
	if m != nil {
		return m.PlayerId
	}
	return 0
}

func (m *ParseRequest) GetMatchId() uint64 {
	if m != nil {
		return m.MatchId
	}
	return 0
}

func (m *ParseRequest) GetReplaySalt() uint64 {
	if m != nil {
		return m.ReplaySalt
	}
	return 0
}

type ParseResult struct {
	ReplayData *ReplayData `protobuf:"bytes,1,opt,name=replayData" json:"replayData,omitempty"`
	Success    bool        `protobuf:"varint,2,opt,name=Success" json:"Success,omitempty"`
	ErrorInfo  string      `protobuf:"bytes,3,opt,name=ErrorInfo" json:"ErrorInfo,omitempty"`
}

func (m *ParseResult) Reset()                    { *m = ParseResult{} }
func (m *ParseResult) String() string            { return proto.CompactTextString(m) }
func (*ParseResult) ProtoMessage()               {}
func (*ParseResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ParseResult) GetReplayData() *ReplayData {
	if m != nil {
		return m.ReplayData
	}
	return nil
}

func (m *ParseResult) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *ParseResult) GetErrorInfo() string {
	if m != nil {
		return m.ErrorInfo
	}
	return ""
}

type ReplayData struct {
	GameTotalTimeSec uint64      `protobuf:"varint,1,opt,name=gameTotalTimeSec" json:"gameTotalTimeSec,omitempty"`
	MovesMap         []*MovesMap `protobuf:"bytes,2,rep,name=movesMap" json:"movesMap,omitempty"`
}

func (m *ReplayData) Reset()                    { *m = ReplayData{} }
func (m *ReplayData) String() string            { return proto.CompactTextString(m) }
func (*ReplayData) ProtoMessage()               {}
func (*ReplayData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ReplayData) GetGameTotalTimeSec() uint64 {
	if m != nil {
		return m.GameTotalTimeSec
	}
	return 0
}

func (m *ReplayData) GetMovesMap() []*MovesMap {
	if m != nil {
		return m.MovesMap
	}
	return nil
}

type MovesMap struct {
	HeroName string  `protobuf:"bytes,1,opt,name=heroName" json:"heroName,omitempty"`
	Moves    []*Move `protobuf:"bytes,2,rep,name=moves" json:"moves,omitempty"`
}

func (m *MovesMap) Reset()                    { *m = MovesMap{} }
func (m *MovesMap) String() string            { return proto.CompactTextString(m) }
func (*MovesMap) ProtoMessage()               {}
func (*MovesMap) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *MovesMap) GetHeroName() string {
	if m != nil {
		return m.HeroName
	}
	return ""
}

func (m *MovesMap) GetMoves() []*Move {
	if m != nil {
		return m.Moves
	}
	return nil
}

type Move struct {
	Time uint64 `protobuf:"varint,1,opt,name=time" json:"time,omitempty"`
	X    uint64 `protobuf:"varint,2,opt,name=x" json:"x,omitempty"`
	Y    uint64 `protobuf:"varint,3,opt,name=y" json:"y,omitempty"`
}

func (m *Move) Reset()                    { *m = Move{} }
func (m *Move) String() string            { return proto.CompactTextString(m) }
func (*Move) ProtoMessage()               {}
func (*Move) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Move) GetTime() uint64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *Move) GetX() uint64 {
	if m != nil {
		return m.X
	}
	return 0
}

func (m *Move) GetY() uint64 {
	if m != nil {
		return m.Y
	}
	return 0
}

func init() {
	proto.RegisterType((*ParseRequest)(nil), "ParseRequest")
	proto.RegisterType((*ParseResult)(nil), "ParseResult")
	proto.RegisterType((*ReplayData)(nil), "ReplayData")
	proto.RegisterType((*MovesMap)(nil), "MovesMap")
	proto.RegisterType((*Move)(nil), "Move")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ParseService service

type ParseServiceClient interface {
	Parse(ctx context.Context, in *ParseRequest, opts ...grpc.CallOption) (*ParseResult, error)
}

type parseServiceClient struct {
	cc *grpc.ClientConn
}

func NewParseServiceClient(cc *grpc.ClientConn) ParseServiceClient {
	return &parseServiceClient{cc}
}

func (c *parseServiceClient) Parse(ctx context.Context, in *ParseRequest, opts ...grpc.CallOption) (*ParseResult, error) {
	out := new(ParseResult)
	err := grpc.Invoke(ctx, "/ParseService/Parse", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ParseService service

type ParseServiceServer interface {
	Parse(context.Context, *ParseRequest) (*ParseResult, error)
}

func RegisterParseServiceServer(s *grpc.Server, srv ParseServiceServer) {
	s.RegisterService(&_ParseService_serviceDesc, srv)
}

func _ParseService_Parse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ParseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParseServiceServer).Parse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ParseService/Parse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParseServiceServer).Parse(ctx, req.(*ParseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ParseService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ParseService",
	HandlerType: (*ParseServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Parse",
			Handler:    _ParseService_Parse_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "prs.proto",
}

func init() { proto.RegisterFile("prs.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 344 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x92, 0x4f, 0x4b, 0xf3, 0x40,
	0x10, 0xc6, 0xdf, 0xb4, 0xe9, 0x6b, 0x32, 0x69, 0x51, 0xf6, 0x14, 0xaa, 0x48, 0x09, 0x28, 0x45,
	0x21, 0x85, 0x0a, 0xfd, 0x00, 0xfe, 0x39, 0xf4, 0x50, 0x91, 0x4d, 0xbd, 0x78, 0x91, 0x6d, 0x3a,
	0xda, 0x42, 0xe2, 0xc6, 0xd9, 0x6d, 0x69, 0xaf, 0x7e, 0x72, 0xc9, 0x76, 0x93, 0x06, 0xbc, 0xed,
	0xf3, 0x9b, 0xec, 0xcc, 0x93, 0x67, 0x16, 0xfc, 0x82, 0x54, 0x5c, 0x90, 0xd4, 0x32, 0xfa, 0x71,
	0xa0, 0xfb, 0x22, 0x48, 0x21, 0xc7, 0xef, 0x0d, 0x2a, 0xcd, 0x2e, 0xc0, 0x27, 0x2c, 0x32, 0xb1,
	0x7f, 0xa5, 0x2c, 0x74, 0x06, 0xce, 0xd0, 0xe7, 0x47, 0xc0, 0xfa, 0xe0, 0x95, 0x47, 0xa4, 0xe9,
	0x32, 0x6c, 0x0d, 0x9c, 0xa1, 0xcb, 0x6b, 0xcd, 0x42, 0x38, 0xc9, 0x85, 0x4e, 0x57, 0xd3, 0x65,
	0xd8, 0x36, 0xa5, 0x4a, 0xb2, 0x4b, 0x80, 0x43, 0x8b, 0x44, 0x64, 0x3a, 0x74, 0x4d, 0xb1, 0x41,
	0x22, 0x82, 0xc0, 0x7a, 0x50, 0x9b, 0x4c, 0xb3, 0xdb, 0xea, 0xf3, 0x47, 0xa1, 0x85, 0xf1, 0x10,
	0x8c, 0x83, 0x98, 0xd7, 0x88, 0x37, 0xca, 0xe5, 0xd4, 0x64, 0x93, 0xa6, 0xa8, 0x94, 0x31, 0xe4,
	0xf1, 0x4a, 0x96, 0x7f, 0xf2, 0x44, 0x24, 0x69, 0xfa, 0xf5, 0x21, 0x8d, 0x23, 0x9f, 0x1f, 0x41,
	0xf4, 0x0e, 0x70, 0xec, 0xc8, 0x6e, 0xe0, 0xec, 0x53, 0xe4, 0x38, 0x97, 0x5a, 0x64, 0xf3, 0x75,
	0x8e, 0x09, 0xa6, 0x66, 0xb0, 0xcb, 0xff, 0x70, 0x76, 0x05, 0x5e, 0x2e, 0xb7, 0xa8, 0x66, 0xa2,
	0x08, 0x5b, 0x83, 0xf6, 0x30, 0x18, 0xfb, 0xf1, 0xcc, 0x02, 0x5e, 0x97, 0xa2, 0x07, 0xf0, 0x2a,
	0x5a, 0xc6, 0xb6, 0x42, 0x92, 0xcf, 0x22, 0x47, 0x9b, 0x69, 0xad, 0xd9, 0x39, 0x74, 0xcc, 0x1d,
	0xdb, 0xab, 0x63, 0x7a, 0xf1, 0x03, 0x8b, 0x26, 0xe0, 0x96, 0x92, 0x31, 0x70, 0xf5, 0xda, 0x5e,
	0x76, 0xb9, 0x39, 0xb3, 0x2e, 0x38, 0x3b, 0xbb, 0x04, 0x67, 0x57, 0xaa, 0xbd, 0xcd, 0xdd, 0xd9,
	0x8f, 0x27, 0x76, 0xab, 0x09, 0xd2, 0x76, 0x9d, 0x22, 0xbb, 0x86, 0x8e, 0xd1, 0xac, 0x17, 0x37,
	0xb7, 0xdd, 0xef, 0xc6, 0x8d, 0xe0, 0xa3, 0x7f, 0xf7, 0xa7, 0x6f, 0x3d, 0xb5, 0x12, 0x84, 0xcb,
	0x51, 0xb1, 0x18, 0x15, 0xa4, 0x16, 0xff, 0xcd, 0x33, 0xb9, 0xfb, 0x0d, 0x00, 0x00, 0xff, 0xff,
	0x2c, 0xab, 0xf6, 0x2c, 0x33, 0x02, 0x00, 0x00,
}
