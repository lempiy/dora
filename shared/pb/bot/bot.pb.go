// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pb/bot.proto

/*
Package bot is a generated protocol buffer package.

It is generated from these files:
	pb/bot.proto

It has these top-level messages:
	PlayerCardRequest
	PlayerCardResult
	PlayerSlot
	PlayerStat
	PlayerHero
	PlayerItem
	MatchesHistoryRequest
	MatchesHistoryResult
	Match
	MatchDetailsRequest
	MatchDetailsResult
	MatchDetails
	MatchHeroSelectEvent
	MatchBroadcasterChannel
	MatchCustomGameData
	MatchBroadcasterInfo
	MatchPlayers
	MatchPermanentBuffs
	MatchAdditionalUnitInventory
	MatchAbilityUpgrade
	MatchPickBans
*/
package bot

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type PlayerCardRequest struct {
	PlayerId uint64 `protobuf:"varint,1,opt,name=player_id,json=playerId" json:"player_id,omitempty"`
}

func (m *PlayerCardRequest) Reset()                    { *m = PlayerCardRequest{} }
func (m *PlayerCardRequest) String() string            { return proto.CompactTextString(m) }
func (*PlayerCardRequest) ProtoMessage()               {}
func (*PlayerCardRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *PlayerCardRequest) GetPlayerId() uint64 {
	if m != nil {
		return m.PlayerId
	}
	return 0
}

type PlayerCardResult struct {
	AccountId          uint64        `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	BackgroundDefIndex uint64        `protobuf:"varint,2,opt,name=background_def_index,json=backgroundDefIndex" json:"background_def_index,omitempty"`
	Slots              []*PlayerSlot `protobuf:"bytes,3,rep,name=slots" json:"slots,omitempty"`
	BadgePoints        uint64        `protobuf:"varint,4,opt,name=badge_points,json=badgePoints" json:"badge_points,omitempty"`
}

func (m *PlayerCardResult) Reset()                    { *m = PlayerCardResult{} }
func (m *PlayerCardResult) String() string            { return proto.CompactTextString(m) }
func (*PlayerCardResult) ProtoMessage()               {}
func (*PlayerCardResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *PlayerCardResult) GetAccountId() uint64 {
	if m != nil {
		return m.AccountId
	}
	return 0
}

func (m *PlayerCardResult) GetBackgroundDefIndex() uint64 {
	if m != nil {
		return m.BackgroundDefIndex
	}
	return 0
}

func (m *PlayerCardResult) GetSlots() []*PlayerSlot {
	if m != nil {
		return m.Slots
	}
	return nil
}

func (m *PlayerCardResult) GetBadgePoints() uint64 {
	if m != nil {
		return m.BadgePoints
	}
	return 0
}

type PlayerSlot struct {
	SlotId uint64 `protobuf:"varint,1,opt,name=slot_id,json=slotId" json:"slot_id,omitempty"`
	// Types that are valid to be assigned to Stats:
	//	*PlayerSlot_Stat
	//	*PlayerSlot_Hero
	//	*PlayerSlot_Item
	Stats isPlayerSlot_Stats `protobuf_oneof:"stats"`
}

func (m *PlayerSlot) Reset()                    { *m = PlayerSlot{} }
func (m *PlayerSlot) String() string            { return proto.CompactTextString(m) }
func (*PlayerSlot) ProtoMessage()               {}
func (*PlayerSlot) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type isPlayerSlot_Stats interface {
	isPlayerSlot_Stats()
}

type PlayerSlot_Stat struct {
	Stat *PlayerStat `protobuf:"bytes,2,opt,name=stat,oneof"`
}
type PlayerSlot_Hero struct {
	Hero *PlayerHero `protobuf:"bytes,3,opt,name=hero,oneof"`
}
type PlayerSlot_Item struct {
	Item *PlayerItem `protobuf:"bytes,4,opt,name=item,oneof"`
}

func (*PlayerSlot_Stat) isPlayerSlot_Stats() {}
func (*PlayerSlot_Hero) isPlayerSlot_Stats() {}
func (*PlayerSlot_Item) isPlayerSlot_Stats() {}

func (m *PlayerSlot) GetStats() isPlayerSlot_Stats {
	if m != nil {
		return m.Stats
	}
	return nil
}

func (m *PlayerSlot) GetSlotId() uint64 {
	if m != nil {
		return m.SlotId
	}
	return 0
}

func (m *PlayerSlot) GetStat() *PlayerStat {
	if x, ok := m.GetStats().(*PlayerSlot_Stat); ok {
		return x.Stat
	}
	return nil
}

func (m *PlayerSlot) GetHero() *PlayerHero {
	if x, ok := m.GetStats().(*PlayerSlot_Hero); ok {
		return x.Hero
	}
	return nil
}

func (m *PlayerSlot) GetItem() *PlayerItem {
	if x, ok := m.GetStats().(*PlayerSlot_Item); ok {
		return x.Item
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*PlayerSlot) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _PlayerSlot_OneofMarshaler, _PlayerSlot_OneofUnmarshaler, _PlayerSlot_OneofSizer, []interface{}{
		(*PlayerSlot_Stat)(nil),
		(*PlayerSlot_Hero)(nil),
		(*PlayerSlot_Item)(nil),
	}
}

func _PlayerSlot_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*PlayerSlot)
	// stats
	switch x := m.Stats.(type) {
	case *PlayerSlot_Stat:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Stat); err != nil {
			return err
		}
	case *PlayerSlot_Hero:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Hero); err != nil {
			return err
		}
	case *PlayerSlot_Item:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Item); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("PlayerSlot.Stats has unexpected type %T", x)
	}
	return nil
}

func _PlayerSlot_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*PlayerSlot)
	switch tag {
	case 2: // stats.stat
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PlayerStat)
		err := b.DecodeMessage(msg)
		m.Stats = &PlayerSlot_Stat{msg}
		return true, err
	case 3: // stats.hero
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PlayerHero)
		err := b.DecodeMessage(msg)
		m.Stats = &PlayerSlot_Hero{msg}
		return true, err
	case 4: // stats.item
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PlayerItem)
		err := b.DecodeMessage(msg)
		m.Stats = &PlayerSlot_Item{msg}
		return true, err
	default:
		return false, nil
	}
}

func _PlayerSlot_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*PlayerSlot)
	// stats
	switch x := m.Stats.(type) {
	case *PlayerSlot_Stat:
		s := proto.Size(x.Stat)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *PlayerSlot_Hero:
		s := proto.Size(x.Hero)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *PlayerSlot_Item:
		s := proto.Size(x.Item)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type PlayerStat struct {
	StatId    uint64 `protobuf:"varint,1,opt,name=stat_id,json=statId" json:"stat_id,omitempty"`
	StatScore uint64 `protobuf:"varint,2,opt,name=stat_score,json=statScore" json:"stat_score,omitempty"`
}

func (m *PlayerStat) Reset()                    { *m = PlayerStat{} }
func (m *PlayerStat) String() string            { return proto.CompactTextString(m) }
func (*PlayerStat) ProtoMessage()               {}
func (*PlayerStat) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *PlayerStat) GetStatId() uint64 {
	if m != nil {
		return m.StatId
	}
	return 0
}

func (m *PlayerStat) GetStatScore() uint64 {
	if m != nil {
		return m.StatScore
	}
	return 0
}

type PlayerHero struct {
	HeroId   uint64 `protobuf:"varint,1,opt,name=hero_id,json=heroId" json:"hero_id,omitempty"`
	HeroWins uint64 `protobuf:"varint,2,opt,name=hero_wins,json=heroWins" json:"hero_wins,omitempty"`
}

func (m *PlayerHero) Reset()                    { *m = PlayerHero{} }
func (m *PlayerHero) String() string            { return proto.CompactTextString(m) }
func (*PlayerHero) ProtoMessage()               {}
func (*PlayerHero) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *PlayerHero) GetHeroId() uint64 {
	if m != nil {
		return m.HeroId
	}
	return 0
}

func (m *PlayerHero) GetHeroWins() uint64 {
	if m != nil {
		return m.HeroWins
	}
	return 0
}

type PlayerItem struct {
	SerializedItem []byte `protobuf:"bytes,1,opt,name=serialized_item,json=serializedItem,proto3" json:"serialized_item,omitempty"`
	ItemId         uint64 `protobuf:"varint,2,opt,name=item_id,json=itemId" json:"item_id,omitempty"`
}

func (m *PlayerItem) Reset()                    { *m = PlayerItem{} }
func (m *PlayerItem) String() string            { return proto.CompactTextString(m) }
func (*PlayerItem) ProtoMessage()               {}
func (*PlayerItem) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *PlayerItem) GetSerializedItem() []byte {
	if m != nil {
		return m.SerializedItem
	}
	return nil
}

func (m *PlayerItem) GetItemId() uint64 {
	if m != nil {
		return m.ItemId
	}
	return 0
}

type MatchesHistoryRequest struct {
	PlayerId uint64 `protobuf:"varint,1,opt,name=player_id,json=playerId" json:"player_id,omitempty"`
}

func (m *MatchesHistoryRequest) Reset()                    { *m = MatchesHistoryRequest{} }
func (m *MatchesHistoryRequest) String() string            { return proto.CompactTextString(m) }
func (*MatchesHistoryRequest) ProtoMessage()               {}
func (*MatchesHistoryRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *MatchesHistoryRequest) GetPlayerId() uint64 {
	if m != nil {
		return m.PlayerId
	}
	return 0
}

type MatchesHistoryResult struct {
	Matches []*Match `protobuf:"bytes,1,rep,name=matches" json:"matches,omitempty"`
}

func (m *MatchesHistoryResult) Reset()                    { *m = MatchesHistoryResult{} }
func (m *MatchesHistoryResult) String() string            { return proto.CompactTextString(m) }
func (*MatchesHistoryResult) ProtoMessage()               {}
func (*MatchesHistoryResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *MatchesHistoryResult) GetMatches() []*Match {
	if m != nil {
		return m.Matches
	}
	return nil
}

type Match struct {
	MatchId          string `protobuf:"bytes,1,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
	StartTime        uint64 `protobuf:"varint,2,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	HeroId           uint64 `protobuf:"varint,3,opt,name=hero_id,json=heroId" json:"hero_id,omitempty"`
	Winner           bool   `protobuf:"varint,4,opt,name=winner" json:"winner,omitempty"`
	GameMode         uint64 `protobuf:"varint,5,opt,name=game_mode,json=gameMode" json:"game_mode,omitempty"`
	LobbyType        uint64 `protobuf:"varint,6,opt,name=lobby_type,json=lobbyType" json:"lobby_type,omitempty"`
	Duration         uint64 `protobuf:"varint,7,opt,name=duration" json:"duration,omitempty"`
	Engine           uint64 `protobuf:"varint,8,opt,name=engine" json:"engine,omitempty"`
	ActiveBattlePass bool   `protobuf:"varint,9,opt,name=active_battle_pass,json=activeBattlePass" json:"active_battle_pass,omitempty"`
}

func (m *Match) Reset()                    { *m = Match{} }
func (m *Match) String() string            { return proto.CompactTextString(m) }
func (*Match) ProtoMessage()               {}
func (*Match) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *Match) GetMatchId() string {
	if m != nil {
		return m.MatchId
	}
	return ""
}

func (m *Match) GetStartTime() uint64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *Match) GetHeroId() uint64 {
	if m != nil {
		return m.HeroId
	}
	return 0
}

func (m *Match) GetWinner() bool {
	if m != nil {
		return m.Winner
	}
	return false
}

func (m *Match) GetGameMode() uint64 {
	if m != nil {
		return m.GameMode
	}
	return 0
}

func (m *Match) GetLobbyType() uint64 {
	if m != nil {
		return m.LobbyType
	}
	return 0
}

func (m *Match) GetDuration() uint64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *Match) GetEngine() uint64 {
	if m != nil {
		return m.Engine
	}
	return 0
}

func (m *Match) GetActiveBattlePass() bool {
	if m != nil {
		return m.ActiveBattlePass
	}
	return false
}

type MatchDetailsRequest struct {
	MatchId uint64 `protobuf:"varint,1,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
}

func (m *MatchDetailsRequest) Reset()                    { *m = MatchDetailsRequest{} }
func (m *MatchDetailsRequest) String() string            { return proto.CompactTextString(m) }
func (*MatchDetailsRequest) ProtoMessage()               {}
func (*MatchDetailsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *MatchDetailsRequest) GetMatchId() uint64 {
	if m != nil {
		return m.MatchId
	}
	return 0
}

type MatchDetailsResult struct {
	Result uint64        `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	Match  *MatchDetails `protobuf:"bytes,2,opt,name=match" json:"match,omitempty"`
	Vote   int32         `protobuf:"varint,3,opt,name=vote" json:"vote,omitempty"`
}

func (m *MatchDetailsResult) Reset()                    { *m = MatchDetailsResult{} }
func (m *MatchDetailsResult) String() string            { return proto.CompactTextString(m) }
func (*MatchDetailsResult) ProtoMessage()               {}
func (*MatchDetailsResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *MatchDetailsResult) GetResult() uint64 {
	if m != nil {
		return m.Result
	}
	return 0
}

func (m *MatchDetailsResult) GetMatch() *MatchDetails {
	if m != nil {
		return m.Match
	}
	return nil
}

func (m *MatchDetailsResult) GetVote() int32 {
	if m != nil {
		return m.Vote
	}
	return 0
}

type MatchDetails struct {
	Players             []*MatchPlayers            `protobuf:"bytes,1,rep,name=players" json:"players,omitempty"`
	Duration            uint32                     `protobuf:"varint,3,opt,name=duration" json:"duration,omitempty"`
	StartTime           uint32                     `protobuf:"fixed32,4,opt,name=startTime" json:"startTime,omitempty"`
	MatchId             uint64                     `protobuf:"varint,6,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
	TowerStatus         []uint32                   `protobuf:"varint,8,rep,packed,name=tower_status,json=towerStatus" json:"tower_status,omitempty"`
	BarracksStatus      []uint32                   `protobuf:"varint,9,rep,packed,name=barracks_status,json=barracksStatus" json:"barracks_status,omitempty"`
	Cluster             uint32                     `protobuf:"varint,10,opt,name=cluster" json:"cluster,omitempty"`
	FirstBloodTime      uint32                     `protobuf:"varint,12,opt,name=first_blood_time,json=firstBloodTime" json:"first_blood_time,omitempty"`
	ReplaySalt          uint32                     `protobuf:"fixed32,13,opt,name=replay_salt,json=replaySalt" json:"replay_salt,omitempty"`
	ServerIp            uint32                     `protobuf:"fixed32,14,opt,name=server_ip,json=serverIp" json:"server_ip,omitempty"`
	ServerPort          uint32                     `protobuf:"varint,15,opt,name=server_port,json=serverPort" json:"server_port,omitempty"`
	LobbyType           uint32                     `protobuf:"varint,16,opt,name=lobby_type,json=lobbyType" json:"lobby_type,omitempty"`
	HumanPlayers        uint32                     `protobuf:"varint,17,opt,name=human_players,json=humanPlayers" json:"human_players,omitempty"`
	AverageSkill        uint32                     `protobuf:"varint,18,opt,name=average_skill,json=averageSkill" json:"average_skill,omitempty"`
	GameBalance         float32                    `protobuf:"fixed32,19,opt,name=game_balance,json=gameBalance" json:"game_balance,omitempty"`
	RadiantTeamId       uint32                     `protobuf:"varint,20,opt,name=radiant_team_id,json=radiantTeamId" json:"radiant_team_id,omitempty"`
	DireTeamId          uint32                     `protobuf:"varint,21,opt,name=dire_team_id,json=direTeamId" json:"dire_team_id,omitempty"`
	Leagueid            uint32                     `protobuf:"varint,22,opt,name=leagueid" json:"leagueid,omitempty"`
	RadiantTeamName     string                     `protobuf:"bytes,23,opt,name=radiant_team_name,json=radiantTeamName" json:"radiant_team_name,omitempty"`
	DireTeamName        string                     `protobuf:"bytes,24,opt,name=dire_team_name,json=direTeamName" json:"dire_team_name,omitempty"`
	RadiantTeamLogo     uint64                     `protobuf:"varint,25,opt,name=radiant_team_logo,json=radiantTeamLogo" json:"radiant_team_logo,omitempty"`
	DireTeamLogo        uint64                     `protobuf:"varint,26,opt,name=dire_team_logo,json=direTeamLogo" json:"dire_team_logo,omitempty"`
	RadiantTeamComplete uint32                     `protobuf:"varint,27,opt,name=radiant_team_complete,json=radiantTeamComplete" json:"radiant_team_complete,omitempty"`
	DireTeamComplete    uint32                     `protobuf:"varint,28,opt,name=dire_team_complete,json=direTeamComplete" json:"dire_team_complete,omitempty"`
	PositiveVotes       uint32                     `protobuf:"varint,29,opt,name=positive_votes,json=positiveVotes" json:"positive_votes,omitempty"`
	NegativeVotes       uint32                     `protobuf:"varint,30,opt,name=negative_votes,json=negativeVotes" json:"negative_votes,omitempty"`
	GameMode            uint64                     `protobuf:"varint,31,opt,name=game_mode,json=gameMode" json:"game_mode,omitempty"`
	PicksBans           []*MatchHeroSelectEvent    `protobuf:"bytes,32,rep,name=picks_bans,json=picksBans" json:"picks_bans,omitempty"`
	MatchSeqNum         uint64                     `protobuf:"varint,33,opt,name=match_seq_num,json=matchSeqNum" json:"match_seq_num,omitempty"`
	ReplayState         uint32                     `protobuf:"varint,34,opt,name=replay_state,json=replayState" json:"replay_state,omitempty"`
	RadiantGuildId      uint32                     `protobuf:"varint,35,opt,name=radiant_guild_id,json=radiantGuildId" json:"radiant_guild_id,omitempty"`
	DireGuildId         uint32                     `protobuf:"varint,36,opt,name=dire_guild_id,json=direGuildId" json:"dire_guild_id,omitempty"`
	RadiantTeamTag      string                     `protobuf:"bytes,37,opt,name=radiant_team_tag,json=radiantTeamTag" json:"radiant_team_tag,omitempty"`
	DireTeamTag         string                     `protobuf:"bytes,38,opt,name=dire_team_tag,json=direTeamTag" json:"dire_team_tag,omitempty"`
	SeriesId            uint32                     `protobuf:"varint,39,opt,name=series_id,json=seriesId" json:"series_id,omitempty"`
	SeriesType          uint32                     `protobuf:"varint,40,opt,name=series_type,json=seriesType" json:"series_type,omitempty"`
	BroadcasterChannels []*MatchBroadcasterChannel `protobuf:"bytes,43,rep,name=broadcaster_channels,json=broadcasterChannels" json:"broadcaster_channels,omitempty"`
	Engine              uint32                     `protobuf:"varint,44,opt,name=engine" json:"engine,omitempty"`
	CustomGameData      *MatchCustomGameData       `protobuf:"bytes,45,opt,name=custom_game_data,json=customGameData" json:"custom_game_data,omitempty"`
	MatchFlags          uint32                     `protobuf:"varint,46,opt,name=match_flags,json=matchFlags" json:"match_flags,omitempty"`
	PrivateMetadataKey  uint32                     `protobuf:"fixed32,47,opt,name=private_metadata_key,json=privateMetadataKey" json:"private_metadata_key,omitempty"`
	RadiantTeamScore    uint32                     `protobuf:"varint,48,opt,name=radiant_team_score,json=radiantTeamScore" json:"radiant_team_score,omitempty"`
	DireTeamScore       uint32                     `protobuf:"varint,49,opt,name=dire_team_score,json=direTeamScore" json:"dire_team_score,omitempty"`
	MatchOutcome        uint32                     `protobuf:"varint,50,opt,name=match_outcome,json=matchOutcome" json:"match_outcome,omitempty"`
	TournamentId        uint32                     `protobuf:"varint,51,opt,name=tournament_id,json=tournamentId" json:"tournament_id,omitempty"`
	TournamentRound     uint32                     `protobuf:"varint,52,opt,name=tournament_round,json=tournamentRound" json:"tournament_round,omitempty"`
	PreGameDuration     uint32                     `protobuf:"varint,53,opt,name=pre_game_duration,json=preGameDuration" json:"pre_game_duration,omitempty"`
}

func (m *MatchDetails) Reset()                    { *m = MatchDetails{} }
func (m *MatchDetails) String() string            { return proto.CompactTextString(m) }
func (*MatchDetails) ProtoMessage()               {}
func (*MatchDetails) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *MatchDetails) GetPlayers() []*MatchPlayers {
	if m != nil {
		return m.Players
	}
	return nil
}

func (m *MatchDetails) GetDuration() uint32 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *MatchDetails) GetStartTime() uint32 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *MatchDetails) GetMatchId() uint64 {
	if m != nil {
		return m.MatchId
	}
	return 0
}

func (m *MatchDetails) GetTowerStatus() []uint32 {
	if m != nil {
		return m.TowerStatus
	}
	return nil
}

func (m *MatchDetails) GetBarracksStatus() []uint32 {
	if m != nil {
		return m.BarracksStatus
	}
	return nil
}

func (m *MatchDetails) GetCluster() uint32 {
	if m != nil {
		return m.Cluster
	}
	return 0
}

func (m *MatchDetails) GetFirstBloodTime() uint32 {
	if m != nil {
		return m.FirstBloodTime
	}
	return 0
}

func (m *MatchDetails) GetReplaySalt() uint32 {
	if m != nil {
		return m.ReplaySalt
	}
	return 0
}

func (m *MatchDetails) GetServerIp() uint32 {
	if m != nil {
		return m.ServerIp
	}
	return 0
}

func (m *MatchDetails) GetServerPort() uint32 {
	if m != nil {
		return m.ServerPort
	}
	return 0
}

func (m *MatchDetails) GetLobbyType() uint32 {
	if m != nil {
		return m.LobbyType
	}
	return 0
}

func (m *MatchDetails) GetHumanPlayers() uint32 {
	if m != nil {
		return m.HumanPlayers
	}
	return 0
}

func (m *MatchDetails) GetAverageSkill() uint32 {
	if m != nil {
		return m.AverageSkill
	}
	return 0
}

func (m *MatchDetails) GetGameBalance() float32 {
	if m != nil {
		return m.GameBalance
	}
	return 0
}

func (m *MatchDetails) GetRadiantTeamId() uint32 {
	if m != nil {
		return m.RadiantTeamId
	}
	return 0
}

func (m *MatchDetails) GetDireTeamId() uint32 {
	if m != nil {
		return m.DireTeamId
	}
	return 0
}

func (m *MatchDetails) GetLeagueid() uint32 {
	if m != nil {
		return m.Leagueid
	}
	return 0
}

func (m *MatchDetails) GetRadiantTeamName() string {
	if m != nil {
		return m.RadiantTeamName
	}
	return ""
}

func (m *MatchDetails) GetDireTeamName() string {
	if m != nil {
		return m.DireTeamName
	}
	return ""
}

func (m *MatchDetails) GetRadiantTeamLogo() uint64 {
	if m != nil {
		return m.RadiantTeamLogo
	}
	return 0
}

func (m *MatchDetails) GetDireTeamLogo() uint64 {
	if m != nil {
		return m.DireTeamLogo
	}
	return 0
}

func (m *MatchDetails) GetRadiantTeamComplete() uint32 {
	if m != nil {
		return m.RadiantTeamComplete
	}
	return 0
}

func (m *MatchDetails) GetDireTeamComplete() uint32 {
	if m != nil {
		return m.DireTeamComplete
	}
	return 0
}

func (m *MatchDetails) GetPositiveVotes() uint32 {
	if m != nil {
		return m.PositiveVotes
	}
	return 0
}

func (m *MatchDetails) GetNegativeVotes() uint32 {
	if m != nil {
		return m.NegativeVotes
	}
	return 0
}

func (m *MatchDetails) GetGameMode() uint64 {
	if m != nil {
		return m.GameMode
	}
	return 0
}

func (m *MatchDetails) GetPicksBans() []*MatchHeroSelectEvent {
	if m != nil {
		return m.PicksBans
	}
	return nil
}

func (m *MatchDetails) GetMatchSeqNum() uint64 {
	if m != nil {
		return m.MatchSeqNum
	}
	return 0
}

func (m *MatchDetails) GetReplayState() uint32 {
	if m != nil {
		return m.ReplayState
	}
	return 0
}

func (m *MatchDetails) GetRadiantGuildId() uint32 {
	if m != nil {
		return m.RadiantGuildId
	}
	return 0
}

func (m *MatchDetails) GetDireGuildId() uint32 {
	if m != nil {
		return m.DireGuildId
	}
	return 0
}

func (m *MatchDetails) GetRadiantTeamTag() string {
	if m != nil {
		return m.RadiantTeamTag
	}
	return ""
}

func (m *MatchDetails) GetDireTeamTag() string {
	if m != nil {
		return m.DireTeamTag
	}
	return ""
}

func (m *MatchDetails) GetSeriesId() uint32 {
	if m != nil {
		return m.SeriesId
	}
	return 0
}

func (m *MatchDetails) GetSeriesType() uint32 {
	if m != nil {
		return m.SeriesType
	}
	return 0
}

func (m *MatchDetails) GetBroadcasterChannels() []*MatchBroadcasterChannel {
	if m != nil {
		return m.BroadcasterChannels
	}
	return nil
}

func (m *MatchDetails) GetEngine() uint32 {
	if m != nil {
		return m.Engine
	}
	return 0
}

func (m *MatchDetails) GetCustomGameData() *MatchCustomGameData {
	if m != nil {
		return m.CustomGameData
	}
	return nil
}

func (m *MatchDetails) GetMatchFlags() uint32 {
	if m != nil {
		return m.MatchFlags
	}
	return 0
}

func (m *MatchDetails) GetPrivateMetadataKey() uint32 {
	if m != nil {
		return m.PrivateMetadataKey
	}
	return 0
}

func (m *MatchDetails) GetRadiantTeamScore() uint32 {
	if m != nil {
		return m.RadiantTeamScore
	}
	return 0
}

func (m *MatchDetails) GetDireTeamScore() uint32 {
	if m != nil {
		return m.DireTeamScore
	}
	return 0
}

func (m *MatchDetails) GetMatchOutcome() uint32 {
	if m != nil {
		return m.MatchOutcome
	}
	return 0
}

func (m *MatchDetails) GetTournamentId() uint32 {
	if m != nil {
		return m.TournamentId
	}
	return 0
}

func (m *MatchDetails) GetTournamentRound() uint32 {
	if m != nil {
		return m.TournamentRound
	}
	return 0
}

func (m *MatchDetails) GetPreGameDuration() uint32 {
	if m != nil {
		return m.PreGameDuration
	}
	return 0
}

type MatchHeroSelectEvent struct {
	IsPick bool   `protobuf:"varint,1,opt,name=is_pick,json=isPick" json:"is_pick,omitempty"`
	Team   uint32 `protobuf:"varint,2,opt,name=team" json:"team,omitempty"`
	HeroId uint32 `protobuf:"varint,3,opt,name=hero_id,json=heroId" json:"hero_id,omitempty"`
}

func (m *MatchHeroSelectEvent) Reset()                    { *m = MatchHeroSelectEvent{} }
func (m *MatchHeroSelectEvent) String() string            { return proto.CompactTextString(m) }
func (*MatchHeroSelectEvent) ProtoMessage()               {}
func (*MatchHeroSelectEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *MatchHeroSelectEvent) GetIsPick() bool {
	if m != nil {
		return m.IsPick
	}
	return false
}

func (m *MatchHeroSelectEvent) GetTeam() uint32 {
	if m != nil {
		return m.Team
	}
	return 0
}

func (m *MatchHeroSelectEvent) GetHeroId() uint32 {
	if m != nil {
		return m.HeroId
	}
	return 0
}

type MatchBroadcasterChannel struct {
	CountryCode      string                  `protobuf:"bytes,1,opt,name=country_code,json=countryCode" json:"country_code,omitempty"`
	Description      string                  `protobuf:"bytes,2,opt,name=description" json:"description,omitempty"`
	BroadcasterInfos []*MatchBroadcasterInfo `protobuf:"bytes,3,rep,name=broadcaster_infos,json=broadcasterInfos" json:"broadcaster_infos,omitempty"`
	LanguageCode     string                  `protobuf:"bytes,4,opt,name=language_code,json=languageCode" json:"language_code,omitempty"`
}

func (m *MatchBroadcasterChannel) Reset()                    { *m = MatchBroadcasterChannel{} }
func (m *MatchBroadcasterChannel) String() string            { return proto.CompactTextString(m) }
func (*MatchBroadcasterChannel) ProtoMessage()               {}
func (*MatchBroadcasterChannel) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *MatchBroadcasterChannel) GetCountryCode() string {
	if m != nil {
		return m.CountryCode
	}
	return ""
}

func (m *MatchBroadcasterChannel) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *MatchBroadcasterChannel) GetBroadcasterInfos() []*MatchBroadcasterInfo {
	if m != nil {
		return m.BroadcasterInfos
	}
	return nil
}

func (m *MatchBroadcasterChannel) GetLanguageCode() string {
	if m != nil {
		return m.LanguageCode
	}
	return ""
}

type MatchCustomGameData struct {
	CustomGameId uint64 `protobuf:"varint,1,opt,name=custom_game_id,json=customGameId" json:"custom_game_id,omitempty"`
	MapName      string `protobuf:"bytes,2,opt,name=map_name,json=mapName" json:"map_name,omitempty"`
}

func (m *MatchCustomGameData) Reset()                    { *m = MatchCustomGameData{} }
func (m *MatchCustomGameData) String() string            { return proto.CompactTextString(m) }
func (*MatchCustomGameData) ProtoMessage()               {}
func (*MatchCustomGameData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *MatchCustomGameData) GetCustomGameId() uint64 {
	if m != nil {
		return m.CustomGameId
	}
	return 0
}

func (m *MatchCustomGameData) GetMapName() string {
	if m != nil {
		return m.MapName
	}
	return ""
}

type MatchBroadcasterInfo struct {
	AccountId uint32 `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	Name      string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
}

func (m *MatchBroadcasterInfo) Reset()                    { *m = MatchBroadcasterInfo{} }
func (m *MatchBroadcasterInfo) String() string            { return proto.CompactTextString(m) }
func (*MatchBroadcasterInfo) ProtoMessage()               {}
func (*MatchBroadcasterInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *MatchBroadcasterInfo) GetAccountId() uint32 {
	if m != nil {
		return m.AccountId
	}
	return 0
}

func (m *MatchBroadcasterInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type MatchPlayers struct {
	AccountId                uint32                          `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	PlayerSlot               uint32                          `protobuf:"varint,2,opt,name=player_slot,json=playerSlot" json:"player_slot,omitempty"`
	HeroId                   uint32                          `protobuf:"varint,3,opt,name=hero_id,json=heroId" json:"hero_id,omitempty"`
	Item_0                   uint32                          `protobuf:"varint,4,opt,name=item_0,json=item0" json:"item_0,omitempty"`
	Item_1                   uint32                          `protobuf:"varint,5,opt,name=item_1,json=item1" json:"item_1,omitempty"`
	Item_2                   uint32                          `protobuf:"varint,6,opt,name=item_2,json=item2" json:"item_2,omitempty"`
	Item_3                   uint32                          `protobuf:"varint,7,opt,name=item_3,json=item3" json:"item_3,omitempty"`
	Item_4                   uint32                          `protobuf:"varint,8,opt,name=item_4,json=item4" json:"item_4,omitempty"`
	Item_5                   uint32                          `protobuf:"varint,9,opt,name=item_5,json=item5" json:"item_5,omitempty"`
	Item_6                   uint32                          `protobuf:"varint,59,opt,name=item_6,json=item6" json:"item_6,omitempty"`
	Item_7                   uint32                          `protobuf:"varint,60,opt,name=item_7,json=item7" json:"item_7,omitempty"`
	Item_8                   uint32                          `protobuf:"varint,61,opt,name=item_8,json=item8" json:"item_8,omitempty"`
	ExpectedTeamContribution float32                         `protobuf:"fixed32,10,opt,name=expected_team_contribution,json=expectedTeamContribution" json:"expected_team_contribution,omitempty"`
	ScaledMetric             float32                         `protobuf:"fixed32,11,opt,name=scaled_metric,json=scaledMetric" json:"scaled_metric,omitempty"`
	PreviousRank             uint32                          `protobuf:"varint,12,opt,name=previous_rank,json=previousRank" json:"previous_rank,omitempty"`
	RankChange               int32                           `protobuf:"zigzag32,13,opt,name=rank_change,json=rankChange" json:"rank_change,omitempty"`
	SoloRank                 bool                            `protobuf:"varint,49,opt,name=solo_rank,json=soloRank" json:"solo_rank,omitempty"`
	SeasonalRank             bool                            `protobuf:"varint,53,opt,name=seasonal_rank,json=seasonalRank" json:"seasonal_rank,omitempty"`
	RankTierUpdated          bool                            `protobuf:"varint,66,opt,name=rank_tier_updated,json=rankTierUpdated" json:"rank_tier_updated,omitempty"`
	Kills                    uint32                          `protobuf:"varint,14,opt,name=kills" json:"kills,omitempty"`
	Deaths                   uint32                          `protobuf:"varint,15,opt,name=deaths" json:"deaths,omitempty"`
	Assists                  uint32                          `protobuf:"varint,16,opt,name=assists" json:"assists,omitempty"`
	LeaverStatus             uint32                          `protobuf:"varint,17,opt,name=leaver_status,json=leaverStatus" json:"leaver_status,omitempty"`
	Gold                     uint32                          `protobuf:"varint,18,opt,name=gold" json:"gold,omitempty"`
	LastHits                 uint32                          `protobuf:"varint,19,opt,name=last_hits,json=lastHits" json:"last_hits,omitempty"`
	Denies                   uint32                          `protobuf:"varint,20,opt,name=denies" json:"denies,omitempty"`
	GoldPerMin               uint32                          `protobuf:"varint,21,opt,name=gold_per_min,json=goldPerMin" json:"gold_per_min,omitempty"`
	XPPerMin                 uint32                          `protobuf:"varint,22,opt,name=XP_per_min,json=XPPerMin" json:"XP_per_min,omitempty"`
	GoldSpent                uint32                          `protobuf:"varint,23,opt,name=gold_spent,json=goldSpent" json:"gold_spent,omitempty"`
	HeroDamage               uint32                          `protobuf:"varint,24,opt,name=hero_damage,json=heroDamage" json:"hero_damage,omitempty"`
	TowerDamage              uint32                          `protobuf:"varint,25,opt,name=tower_damage,json=towerDamage" json:"tower_damage,omitempty"`
	HeroHealing              uint32                          `protobuf:"varint,26,opt,name=hero_healing,json=heroHealing" json:"hero_healing,omitempty"`
	Level                    uint32                          `protobuf:"varint,27,opt,name=level" json:"level,omitempty"`
	TimeLastSeen             uint32                          `protobuf:"varint,28,opt,name=time_last_seen,json=timeLastSeen" json:"time_last_seen,omitempty"`
	PlayerName               string                          `protobuf:"bytes,29,opt,name=player_name,json=playerName" json:"player_name,omitempty"`
	SupportAbilityValue      uint32                          `protobuf:"varint,30,opt,name=support_ability_value,json=supportAbilityValue" json:"support_ability_value,omitempty"`
	FeedingDetected          bool                            `protobuf:"varint,32,opt,name=feeding_detected,json=feedingDetected" json:"feeding_detected,omitempty"`
	SearchRank               uint32                          `protobuf:"varint,34,opt,name=search_rank,json=searchRank" json:"search_rank,omitempty"`
	SearchRankUncertainty    uint32                          `protobuf:"varint,35,opt,name=search_rank_uncertainty,json=searchRankUncertainty" json:"search_rank_uncertainty,omitempty"`
	RankUncertaintyChange    int32                           `protobuf:"varint,36,opt,name=rank_uncertainty_change,json=rankUncertaintyChange" json:"rank_uncertainty_change,omitempty"`
	HeroPlayCount            uint32                          `protobuf:"varint,37,opt,name=hero_play_count,json=heroPlayCount" json:"hero_play_count,omitempty"`
	PartyId                  uint64                          `protobuf:"fixed64,38,opt,name=party_id,json=partyId" json:"party_id,omitempty"`
	ScaledHeroDamage         uint32                          `protobuf:"varint,54,opt,name=scaled_hero_damage,json=scaledHeroDamage" json:"scaled_hero_damage,omitempty"`
	ScaledTowerDamage        uint32                          `protobuf:"varint,55,opt,name=scaled_tower_damage,json=scaledTowerDamage" json:"scaled_tower_damage,omitempty"`
	ScaledHeroHealing        uint32                          `protobuf:"varint,56,opt,name=scaled_hero_healing,json=scaledHeroHealing" json:"scaled_hero_healing,omitempty"`
	ScaledKills              float32                         `protobuf:"fixed32,39,opt,name=scaled_kills,json=scaledKills" json:"scaled_kills,omitempty"`
	ScaledDeaths             float32                         `protobuf:"fixed32,40,opt,name=scaled_deaths,json=scaledDeaths" json:"scaled_deaths,omitempty"`
	ScaledAssists            float32                         `protobuf:"fixed32,41,opt,name=scaled_assists,json=scaledAssists" json:"scaled_assists,omitempty"`
	ClaimedFarmGold          uint32                          `protobuf:"varint,42,opt,name=claimed_farm_gold,json=claimedFarmGold" json:"claimed_farm_gold,omitempty"`
	SupportGold              uint32                          `protobuf:"varint,43,opt,name=support_gold,json=supportGold" json:"support_gold,omitempty"`
	ClaimedDenies            uint32                          `protobuf:"varint,44,opt,name=claimed_denies,json=claimedDenies" json:"claimed_denies,omitempty"`
	ClaimedMisses            uint32                          `protobuf:"varint,45,opt,name=claimed_misses,json=claimedMisses" json:"claimed_misses,omitempty"`
	Misses                   uint32                          `protobuf:"varint,46,opt,name=misses" json:"misses,omitempty"`
	AbilityUpgrades          []*MatchAbilityUpgrade          `protobuf:"bytes,47,rep,name=ability_upgrades,json=abilityUpgrades" json:"ability_upgrades,omitempty"`
	AdditionalUnitsInventory []*MatchAdditionalUnitInventory `protobuf:"bytes,48,rep,name=additional_units_inventory,json=additionalUnitsInventory" json:"additional_units_inventory,omitempty"`
	PermanentBuffs           []*MatchPermanentBuffs          `protobuf:"bytes,57,rep,name=permanent_buffs,json=permanentBuffs" json:"permanent_buffs,omitempty"`
	CustomGameData           *MatchCustomGameData            `protobuf:"bytes,50,opt,name=custom_game_data,json=customGameData" json:"custom_game_data,omitempty"`
	ActivePlusSubscription   bool                            `protobuf:"varint,51,opt,name=active_plus_subscription,json=activePlusSubscription" json:"active_plus_subscription,omitempty"`
	NetWorth                 uint32                          `protobuf:"varint,52,opt,name=net_worth,json=netWorth" json:"net_worth,omitempty"`
	BotDifficulty            uint32                          `protobuf:"varint,58,opt,name=bot_difficulty,json=botDifficulty" json:"bot_difficulty,omitempty"`
	HeroPickOrder            uint32                          `protobuf:"varint,63,opt,name=hero_pick_order,json=heroPickOrder" json:"hero_pick_order,omitempty"`
	HeroWasRandomed          bool                            `protobuf:"varint,64,opt,name=hero_was_randomed,json=heroWasRandomed" json:"hero_was_randomed,omitempty"`
	HeroWasBonus             bool                            `protobuf:"varint,65,opt,name=hero_was_bonus,json=heroWasBonus" json:"hero_was_bonus,omitempty"`
	ActiveBattlePass         bool                            `protobuf:"varint,67,opt,name=active_battle_pass,json=activeBattlePass" json:"active_battle_pass,omitempty"`
}

func (m *MatchPlayers) Reset()                    { *m = MatchPlayers{} }
func (m *MatchPlayers) String() string            { return proto.CompactTextString(m) }
func (*MatchPlayers) ProtoMessage()               {}
func (*MatchPlayers) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *MatchPlayers) GetAccountId() uint32 {
	if m != nil {
		return m.AccountId
	}
	return 0
}

func (m *MatchPlayers) GetPlayerSlot() uint32 {
	if m != nil {
		return m.PlayerSlot
	}
	return 0
}

func (m *MatchPlayers) GetHeroId() uint32 {
	if m != nil {
		return m.HeroId
	}
	return 0
}

func (m *MatchPlayers) GetItem_0() uint32 {
	if m != nil {
		return m.Item_0
	}
	return 0
}

func (m *MatchPlayers) GetItem_1() uint32 {
	if m != nil {
		return m.Item_1
	}
	return 0
}

func (m *MatchPlayers) GetItem_2() uint32 {
	if m != nil {
		return m.Item_2
	}
	return 0
}

func (m *MatchPlayers) GetItem_3() uint32 {
	if m != nil {
		return m.Item_3
	}
	return 0
}

func (m *MatchPlayers) GetItem_4() uint32 {
	if m != nil {
		return m.Item_4
	}
	return 0
}

func (m *MatchPlayers) GetItem_5() uint32 {
	if m != nil {
		return m.Item_5
	}
	return 0
}

func (m *MatchPlayers) GetItem_6() uint32 {
	if m != nil {
		return m.Item_6
	}
	return 0
}

func (m *MatchPlayers) GetItem_7() uint32 {
	if m != nil {
		return m.Item_7
	}
	return 0
}

func (m *MatchPlayers) GetItem_8() uint32 {
	if m != nil {
		return m.Item_8
	}
	return 0
}

func (m *MatchPlayers) GetExpectedTeamContribution() float32 {
	if m != nil {
		return m.ExpectedTeamContribution
	}
	return 0
}

func (m *MatchPlayers) GetScaledMetric() float32 {
	if m != nil {
		return m.ScaledMetric
	}
	return 0
}

func (m *MatchPlayers) GetPreviousRank() uint32 {
	if m != nil {
		return m.PreviousRank
	}
	return 0
}

func (m *MatchPlayers) GetRankChange() int32 {
	if m != nil {
		return m.RankChange
	}
	return 0
}

func (m *MatchPlayers) GetSoloRank() bool {
	if m != nil {
		return m.SoloRank
	}
	return false
}

func (m *MatchPlayers) GetSeasonalRank() bool {
	if m != nil {
		return m.SeasonalRank
	}
	return false
}

func (m *MatchPlayers) GetRankTierUpdated() bool {
	if m != nil {
		return m.RankTierUpdated
	}
	return false
}

func (m *MatchPlayers) GetKills() uint32 {
	if m != nil {
		return m.Kills
	}
	return 0
}

func (m *MatchPlayers) GetDeaths() uint32 {
	if m != nil {
		return m.Deaths
	}
	return 0
}

func (m *MatchPlayers) GetAssists() uint32 {
	if m != nil {
		return m.Assists
	}
	return 0
}

func (m *MatchPlayers) GetLeaverStatus() uint32 {
	if m != nil {
		return m.LeaverStatus
	}
	return 0
}

func (m *MatchPlayers) GetGold() uint32 {
	if m != nil {
		return m.Gold
	}
	return 0
}

func (m *MatchPlayers) GetLastHits() uint32 {
	if m != nil {
		return m.LastHits
	}
	return 0
}

func (m *MatchPlayers) GetDenies() uint32 {
	if m != nil {
		return m.Denies
	}
	return 0
}

func (m *MatchPlayers) GetGoldPerMin() uint32 {
	if m != nil {
		return m.GoldPerMin
	}
	return 0
}

func (m *MatchPlayers) GetXPPerMin() uint32 {
	if m != nil {
		return m.XPPerMin
	}
	return 0
}

func (m *MatchPlayers) GetGoldSpent() uint32 {
	if m != nil {
		return m.GoldSpent
	}
	return 0
}

func (m *MatchPlayers) GetHeroDamage() uint32 {
	if m != nil {
		return m.HeroDamage
	}
	return 0
}

func (m *MatchPlayers) GetTowerDamage() uint32 {
	if m != nil {
		return m.TowerDamage
	}
	return 0
}

func (m *MatchPlayers) GetHeroHealing() uint32 {
	if m != nil {
		return m.HeroHealing
	}
	return 0
}

func (m *MatchPlayers) GetLevel() uint32 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *MatchPlayers) GetTimeLastSeen() uint32 {
	if m != nil {
		return m.TimeLastSeen
	}
	return 0
}

func (m *MatchPlayers) GetPlayerName() string {
	if m != nil {
		return m.PlayerName
	}
	return ""
}

func (m *MatchPlayers) GetSupportAbilityValue() uint32 {
	if m != nil {
		return m.SupportAbilityValue
	}
	return 0
}

func (m *MatchPlayers) GetFeedingDetected() bool {
	if m != nil {
		return m.FeedingDetected
	}
	return false
}

func (m *MatchPlayers) GetSearchRank() uint32 {
	if m != nil {
		return m.SearchRank
	}
	return 0
}

func (m *MatchPlayers) GetSearchRankUncertainty() uint32 {
	if m != nil {
		return m.SearchRankUncertainty
	}
	return 0
}

func (m *MatchPlayers) GetRankUncertaintyChange() int32 {
	if m != nil {
		return m.RankUncertaintyChange
	}
	return 0
}

func (m *MatchPlayers) GetHeroPlayCount() uint32 {
	if m != nil {
		return m.HeroPlayCount
	}
	return 0
}

func (m *MatchPlayers) GetPartyId() uint64 {
	if m != nil {
		return m.PartyId
	}
	return 0
}

func (m *MatchPlayers) GetScaledHeroDamage() uint32 {
	if m != nil {
		return m.ScaledHeroDamage
	}
	return 0
}

func (m *MatchPlayers) GetScaledTowerDamage() uint32 {
	if m != nil {
		return m.ScaledTowerDamage
	}
	return 0
}

func (m *MatchPlayers) GetScaledHeroHealing() uint32 {
	if m != nil {
		return m.ScaledHeroHealing
	}
	return 0
}

func (m *MatchPlayers) GetScaledKills() float32 {
	if m != nil {
		return m.ScaledKills
	}
	return 0
}

func (m *MatchPlayers) GetScaledDeaths() float32 {
	if m != nil {
		return m.ScaledDeaths
	}
	return 0
}

func (m *MatchPlayers) GetScaledAssists() float32 {
	if m != nil {
		return m.ScaledAssists
	}
	return 0
}

func (m *MatchPlayers) GetClaimedFarmGold() uint32 {
	if m != nil {
		return m.ClaimedFarmGold
	}
	return 0
}

func (m *MatchPlayers) GetSupportGold() uint32 {
	if m != nil {
		return m.SupportGold
	}
	return 0
}

func (m *MatchPlayers) GetClaimedDenies() uint32 {
	if m != nil {
		return m.ClaimedDenies
	}
	return 0
}

func (m *MatchPlayers) GetClaimedMisses() uint32 {
	if m != nil {
		return m.ClaimedMisses
	}
	return 0
}

func (m *MatchPlayers) GetMisses() uint32 {
	if m != nil {
		return m.Misses
	}
	return 0
}

func (m *MatchPlayers) GetAbilityUpgrades() []*MatchAbilityUpgrade {
	if m != nil {
		return m.AbilityUpgrades
	}
	return nil
}

func (m *MatchPlayers) GetAdditionalUnitsInventory() []*MatchAdditionalUnitInventory {
	if m != nil {
		return m.AdditionalUnitsInventory
	}
	return nil
}

func (m *MatchPlayers) GetPermanentBuffs() []*MatchPermanentBuffs {
	if m != nil {
		return m.PermanentBuffs
	}
	return nil
}

func (m *MatchPlayers) GetCustomGameData() *MatchCustomGameData {
	if m != nil {
		return m.CustomGameData
	}
	return nil
}

func (m *MatchPlayers) GetActivePlusSubscription() bool {
	if m != nil {
		return m.ActivePlusSubscription
	}
	return false
}

func (m *MatchPlayers) GetNetWorth() uint32 {
	if m != nil {
		return m.NetWorth
	}
	return 0
}

func (m *MatchPlayers) GetBotDifficulty() uint32 {
	if m != nil {
		return m.BotDifficulty
	}
	return 0
}

func (m *MatchPlayers) GetHeroPickOrder() uint32 {
	if m != nil {
		return m.HeroPickOrder
	}
	return 0
}

func (m *MatchPlayers) GetHeroWasRandomed() bool {
	if m != nil {
		return m.HeroWasRandomed
	}
	return false
}

func (m *MatchPlayers) GetHeroWasBonus() bool {
	if m != nil {
		return m.HeroWasBonus
	}
	return false
}

func (m *MatchPlayers) GetActiveBattlePass() bool {
	if m != nil {
		return m.ActiveBattlePass
	}
	return false
}

type MatchPermanentBuffs struct {
	PermanentBuff uint64 `protobuf:"varint,1,opt,name=permanent_buff,json=permanentBuff" json:"permanent_buff,omitempty"`
	StackCount    uint64 `protobuf:"varint,2,opt,name=stack_count,json=stackCount" json:"stack_count,omitempty"`
}

func (m *MatchPermanentBuffs) Reset()                    { *m = MatchPermanentBuffs{} }
func (m *MatchPermanentBuffs) String() string            { return proto.CompactTextString(m) }
func (*MatchPermanentBuffs) ProtoMessage()               {}
func (*MatchPermanentBuffs) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *MatchPermanentBuffs) GetPermanentBuff() uint64 {
	if m != nil {
		return m.PermanentBuff
	}
	return 0
}

func (m *MatchPermanentBuffs) GetStackCount() uint64 {
	if m != nil {
		return m.StackCount
	}
	return 0
}

type MatchAdditionalUnitInventory struct {
	UnitName string   `protobuf:"bytes,1,opt,name=unit_name,json=unitName" json:"unit_name,omitempty"`
	Items    []uint32 `protobuf:"varint,2,rep,packed,name=items" json:"items,omitempty"`
}

func (m *MatchAdditionalUnitInventory) Reset()                    { *m = MatchAdditionalUnitInventory{} }
func (m *MatchAdditionalUnitInventory) String() string            { return proto.CompactTextString(m) }
func (*MatchAdditionalUnitInventory) ProtoMessage()               {}
func (*MatchAdditionalUnitInventory) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *MatchAdditionalUnitInventory) GetUnitName() string {
	if m != nil {
		return m.UnitName
	}
	return ""
}

func (m *MatchAdditionalUnitInventory) GetItems() []uint32 {
	if m != nil {
		return m.Items
	}
	return nil
}

type MatchAbilityUpgrade struct {
	Ability uint64 `protobuf:"varint,1,opt,name=ability" json:"ability,omitempty"`
	Time    uint64 `protobuf:"varint,2,opt,name=time" json:"time,omitempty"`
	Level   uint64 `protobuf:"varint,3,opt,name=level" json:"level,omitempty"`
}

func (m *MatchAbilityUpgrade) Reset()                    { *m = MatchAbilityUpgrade{} }
func (m *MatchAbilityUpgrade) String() string            { return proto.CompactTextString(m) }
func (*MatchAbilityUpgrade) ProtoMessage()               {}
func (*MatchAbilityUpgrade) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *MatchAbilityUpgrade) GetAbility() uint64 {
	if m != nil {
		return m.Ability
	}
	return 0
}

func (m *MatchAbilityUpgrade) GetTime() uint64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *MatchAbilityUpgrade) GetLevel() uint64 {
	if m != nil {
		return m.Level
	}
	return 0
}

type MatchPickBans struct {
	IsPick bool  `protobuf:"varint,1,opt,name=is_pick,json=isPick" json:"is_pick,omitempty"`
	Team   int64 `protobuf:"varint,2,opt,name=team" json:"team,omitempty"`
	HeroId int64 `protobuf:"varint,3,opt,name=hero_id,json=heroId" json:"hero_id,omitempty"`
}

func (m *MatchPickBans) Reset()                    { *m = MatchPickBans{} }
func (m *MatchPickBans) String() string            { return proto.CompactTextString(m) }
func (*MatchPickBans) ProtoMessage()               {}
func (*MatchPickBans) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *MatchPickBans) GetIsPick() bool {
	if m != nil {
		return m.IsPick
	}
	return false
}

func (m *MatchPickBans) GetTeam() int64 {
	if m != nil {
		return m.Team
	}
	return 0
}

func (m *MatchPickBans) GetHeroId() int64 {
	if m != nil {
		return m.HeroId
	}
	return 0
}

func init() {
	proto.RegisterType((*PlayerCardRequest)(nil), "PlayerCardRequest")
	proto.RegisterType((*PlayerCardResult)(nil), "PlayerCardResult")
	proto.RegisterType((*PlayerSlot)(nil), "PlayerSlot")
	proto.RegisterType((*PlayerStat)(nil), "PlayerStat")
	proto.RegisterType((*PlayerHero)(nil), "PlayerHero")
	proto.RegisterType((*PlayerItem)(nil), "PlayerItem")
	proto.RegisterType((*MatchesHistoryRequest)(nil), "MatchesHistoryRequest")
	proto.RegisterType((*MatchesHistoryResult)(nil), "MatchesHistoryResult")
	proto.RegisterType((*Match)(nil), "Match")
	proto.RegisterType((*MatchDetailsRequest)(nil), "MatchDetailsRequest")
	proto.RegisterType((*MatchDetailsResult)(nil), "MatchDetailsResult")
	proto.RegisterType((*MatchDetails)(nil), "MatchDetails")
	proto.RegisterType((*MatchHeroSelectEvent)(nil), "MatchHeroSelectEvent")
	proto.RegisterType((*MatchBroadcasterChannel)(nil), "MatchBroadcasterChannel")
	proto.RegisterType((*MatchCustomGameData)(nil), "MatchCustomGameData")
	proto.RegisterType((*MatchBroadcasterInfo)(nil), "MatchBroadcasterInfo")
	proto.RegisterType((*MatchPlayers)(nil), "MatchPlayers")
	proto.RegisterType((*MatchPermanentBuffs)(nil), "MatchPermanentBuffs")
	proto.RegisterType((*MatchAdditionalUnitInventory)(nil), "MatchAdditionalUnitInventory")
	proto.RegisterType((*MatchAbilityUpgrade)(nil), "MatchAbilityUpgrade")
	proto.RegisterType((*MatchPickBans)(nil), "MatchPickBans")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for BotService service

type BotServiceClient interface {
	GetPlayerCard(ctx context.Context, in *PlayerCardRequest, opts ...grpc.CallOption) (*PlayerCardResult, error)
	GetMatchesHistory(ctx context.Context, in *MatchesHistoryRequest, opts ...grpc.CallOption) (*MatchesHistoryResult, error)
	GetMatchDetails(ctx context.Context, in *MatchDetailsRequest, opts ...grpc.CallOption) (*MatchDetailsResult, error)
}

type botServiceClient struct {
	cc *grpc.ClientConn
}

func NewBotServiceClient(cc *grpc.ClientConn) BotServiceClient {
	return &botServiceClient{cc}
}

func (c *botServiceClient) GetPlayerCard(ctx context.Context, in *PlayerCardRequest, opts ...grpc.CallOption) (*PlayerCardResult, error) {
	out := new(PlayerCardResult)
	err := grpc.Invoke(ctx, "/BotService/GetPlayerCard", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botServiceClient) GetMatchesHistory(ctx context.Context, in *MatchesHistoryRequest, opts ...grpc.CallOption) (*MatchesHistoryResult, error) {
	out := new(MatchesHistoryResult)
	err := grpc.Invoke(ctx, "/BotService/GetMatchesHistory", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botServiceClient) GetMatchDetails(ctx context.Context, in *MatchDetailsRequest, opts ...grpc.CallOption) (*MatchDetailsResult, error) {
	out := new(MatchDetailsResult)
	err := grpc.Invoke(ctx, "/BotService/GetMatchDetails", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for BotService service

type BotServiceServer interface {
	GetPlayerCard(context.Context, *PlayerCardRequest) (*PlayerCardResult, error)
	GetMatchesHistory(context.Context, *MatchesHistoryRequest) (*MatchesHistoryResult, error)
	GetMatchDetails(context.Context, *MatchDetailsRequest) (*MatchDetailsResult, error)
}

func RegisterBotServiceServer(s *grpc.Server, srv BotServiceServer) {
	s.RegisterService(&_BotService_serviceDesc, srv)
}

func _BotService_GetPlayerCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayerCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServiceServer).GetPlayerCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BotService/GetPlayerCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServiceServer).GetPlayerCard(ctx, req.(*PlayerCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotService_GetMatchesHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MatchesHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServiceServer).GetMatchesHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BotService/GetMatchesHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServiceServer).GetMatchesHistory(ctx, req.(*MatchesHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotService_GetMatchDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MatchDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServiceServer).GetMatchDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BotService/GetMatchDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServiceServer).GetMatchDetails(ctx, req.(*MatchDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _BotService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "BotService",
	HandlerType: (*BotServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPlayerCard",
			Handler:    _BotService_GetPlayerCard_Handler,
		},
		{
			MethodName: "GetMatchesHistory",
			Handler:    _BotService_GetMatchesHistory_Handler,
		},
		{
			MethodName: "GetMatchDetails",
			Handler:    _BotService_GetMatchDetails_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/bot.proto",
}

func init() { proto.RegisterFile("pb/bot.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 2694 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x59, 0xd9, 0x76, 0x1c, 0xb7,
	0xd1, 0x16, 0xc5, 0x6d, 0x08, 0xce, 0x70, 0x69, 0x92, 0x12, 0x4c, 0x5b, 0xbf, 0xa9, 0x91, 0x65,
	0xd1, 0xcb, 0x4f, 0x51, 0xd4, 0x62, 0x25, 0xf1, 0x12, 0x0f, 0x19, 0x8b, 0x73, 0x6c, 0xd9, 0x4c,
	0x53, 0xb2, 0x9d, 0xed, 0xf4, 0xc1, 0x74, 0x17, 0x87, 0x38, 0xd3, 0x9b, 0x01, 0x34, 0xe5, 0xc9,
	0x53, 0xe4, 0x2e, 0x2f, 0x90, 0x9b, 0x3c, 0x49, 0x6e, 0x72, 0xf2, 0x4c, 0x39, 0x55, 0x40, 0x6f,
	0x14, 0x9d, 0x38, 0x77, 0x83, 0xaf, 0x3e, 0x14, 0xb6, 0xaa, 0xc2, 0xd7, 0x18, 0xd6, 0xcd, 0x47,
	0xf7, 0x47, 0x99, 0xd9, 0xcb, 0x55, 0x66, 0xb2, 0xfe, 0x3e, 0x5b, 0x3f, 0x89, 0xc5, 0x14, 0xd4,
	0xa1, 0x50, 0x91, 0x0f, 0x3f, 0x14, 0xa0, 0x8d, 0xf7, 0x26, 0x5b, 0xca, 0x09, 0x0c, 0x64, 0xc4,
	0x67, 0x76, 0x66, 0x76, 0xe7, 0xfc, 0x8e, 0x05, 0x86, 0x51, 0xff, 0xef, 0x33, 0x6c, 0xad, 0xd9,
	0x45, 0x17, 0xb1, 0xf1, 0x6e, 0x31, 0x26, 0xc2, 0x30, 0x2b, 0x52, 0x53, 0x77, 0x59, 0x72, 0xc8,
	0x30, 0xf2, 0xf6, 0xd9, 0xe6, 0x48, 0x84, 0x93, 0xb1, 0xca, 0x8a, 0x34, 0x0a, 0x22, 0x38, 0x0b,
	0x64, 0x1a, 0xc1, 0x8f, 0xfc, 0x3a, 0x11, 0xbd, 0xda, 0x76, 0x04, 0x67, 0x43, 0xb4, 0x78, 0xb7,
	0xd9, 0xbc, 0x8e, 0x33, 0xa3, 0xf9, 0xec, 0xce, 0xec, 0xee, 0xf2, 0xc1, 0xf2, 0x9e, 0x1d, 0xf2,
	0x34, 0xce, 0x8c, 0x6f, 0x2d, 0xde, 0x6d, 0xd6, 0x1d, 0x89, 0x68, 0x0c, 0x41, 0x9e, 0xc9, 0xd4,
	0x68, 0x3e, 0x47, 0xce, 0x96, 0x09, 0x3b, 0x21, 0xa8, 0xff, 0xd7, 0x19, 0xc6, 0xea, 0x8e, 0xde,
	0x4d, 0xb6, 0x88, 0x5d, 0xeb, 0x29, 0x2e, 0x60, 0x73, 0x18, 0x79, 0xb7, 0xd9, 0x9c, 0x36, 0xc2,
	0xd0, 0x7c, 0x1a, 0x83, 0x19, 0x61, 0x8e, 0xaf, 0xf9, 0x64, 0x42, 0xca, 0x39, 0xa8, 0x8c, 0xcf,
	0xb6, 0x28, 0xc7, 0xa0, 0x32, 0xa4, 0xa0, 0x09, 0x29, 0xd2, 0x40, 0x42, 0x13, 0xa9, 0x29, 0x43,
	0x03, 0x09, 0x52, 0xd0, 0x34, 0x58, 0x64, 0xf3, 0xe8, 0x4d, 0xf7, 0x8f, 0xaa, 0x89, 0xa1, 0x73,
	0x9c, 0x98, 0x11, 0xad, 0x89, 0x19, 0x81, 0x13, 0xbb, 0xc5, 0x18, 0x19, 0x74, 0x98, 0x29, 0x70,
	0xdb, 0xb5, 0x84, 0xc8, 0x29, 0x02, 0xfd, 0x41, 0xe9, 0x05, 0xe7, 0x81, 0x5e, 0x70, 0x1e, 0x0d,
	0x2f, 0xd8, 0x1c, 0x46, 0x78, 0x9e, 0x64, 0x78, 0x25, 0x53, 0xed, 0x9c, 0x74, 0x10, 0xf8, 0x4e,
	0xa6, 0xba, 0xff, 0x75, 0xe9, 0x03, 0x27, 0xea, 0xdd, 0x63, 0xab, 0x1a, 0x94, 0x14, 0xb1, 0xfc,
	0x33, 0x44, 0x01, 0x2d, 0x07, 0x7d, 0x75, 0xfd, 0x95, 0x1a, 0x26, 0xe2, 0x4d, 0xb6, 0x88, 0x56,
	0x1c, 0xcc, 0x7a, 0x5c, 0xc0, 0xe6, 0x30, 0xea, 0x3f, 0x62, 0x5b, 0xcf, 0x85, 0x09, 0xcf, 0x41,
	0x1f, 0x4b, 0x6d, 0x32, 0x35, 0xfd, 0x59, 0x51, 0xf5, 0x94, 0x6d, 0x5e, 0xee, 0x45, 0x81, 0xb5,
	0xc3, 0x16, 0x13, 0x8b, 0xf3, 0x19, 0x8a, 0x84, 0x85, 0x3d, 0xe2, 0xf9, 0x25, 0xdc, 0xff, 0xcb,
	0x75, 0x36, 0x4f, 0x90, 0xf7, 0x06, 0xeb, 0x10, 0x58, 0xfa, 0x5f, 0x72, 0xa4, 0x6a, 0x1f, 0x95,
	0x09, 0x8c, 0x4c, 0x9a, 0xfb, 0xa8, 0xcc, 0x0b, 0x99, 0x40, 0x73, 0xe7, 0x66, 0x5b, 0x3b, 0x77,
	0x83, 0x2d, 0xbc, 0x92, 0x69, 0x0a, 0x8a, 0x0e, 0xb5, 0xe3, 0xbb, 0x16, 0xae, 0x65, 0x2c, 0x12,
	0x08, 0x92, 0x2c, 0x02, 0x3e, 0x6f, 0xd7, 0x82, 0xc0, 0xf3, 0x2c, 0x02, 0x1c, 0x2c, 0xce, 0x46,
	0xa3, 0x69, 0x60, 0xa6, 0x39, 0xf0, 0x05, 0x3b, 0x18, 0x21, 0x2f, 0xa6, 0x39, 0x78, 0xdb, 0xac,
	0x13, 0x15, 0x4a, 0x18, 0x99, 0xa5, 0x7c, 0xd1, 0x76, 0x2d, 0xdb, 0x38, 0x1e, 0xa4, 0x63, 0x99,
	0x02, 0xef, 0xd8, 0x79, 0xd8, 0x96, 0xf7, 0x21, 0xf3, 0x44, 0x68, 0xe4, 0x05, 0x04, 0x23, 0x61,
	0x4c, 0x0c, 0x41, 0x2e, 0xb4, 0xe6, 0x4b, 0x34, 0xa7, 0x35, 0x6b, 0x19, 0x90, 0xe1, 0x44, 0x68,
	0xdd, 0xdf, 0x67, 0x1b, 0xb4, 0x23, 0x47, 0x60, 0x84, 0x8c, 0x75, 0x79, 0x00, 0x97, 0xf7, 0x67,
	0xae, 0xda, 0x9f, 0x3e, 0x30, 0xaf, 0xdd, 0x83, 0x36, 0xff, 0x06, 0x5b, 0x50, 0xf4, 0xab, 0x8c,
	0x27, 0xdb, 0xf2, 0xee, 0xb0, 0x79, 0xea, 0xe8, 0xf2, 0xa5, 0xb7, 0xd7, 0xea, 0x6b, 0x6d, 0x9e,
	0xc7, 0xe6, 0x2e, 0x32, 0x03, 0xb4, 0xa1, 0xf3, 0x3e, 0xfd, 0xee, 0xff, 0x6d, 0x85, 0x75, 0x9b,
	0x5c, 0xef, 0x1e, 0x5b, 0xb4, 0x21, 0x50, 0x1e, 0xaf, 0xf3, 0x65, 0x23, 0x52, 0xfb, 0xa5, 0xb5,
	0xb5, 0x69, 0xe8, 0xb1, 0xd7, 0xd8, 0xb4, 0xb7, 0x58, 0x7d, 0x94, 0x74, 0x4e, 0x8b, 0xcd, 0xb3,
	0x6d, 0xae, 0x7a, 0xa1, 0xb5, 0x6a, 0xac, 0x20, 0x26, 0x7b, 0x05, 0x2a, 0xc0, 0x8c, 0x2a, 0x34,
	0xef, 0xec, 0xcc, 0xee, 0xf6, 0xfc, 0x65, 0xc2, 0x4e, 0x09, 0xc2, 0x7c, 0x18, 0x09, 0xa5, 0x44,
	0x38, 0xd1, 0x25, 0x6b, 0x89, 0x58, 0x2b, 0x25, 0xec, 0x88, 0x9c, 0x2d, 0x86, 0x71, 0xa1, 0x0d,
	0x28, 0xce, 0x68, 0x7e, 0x65, 0xd3, 0xdb, 0x65, 0x6b, 0x67, 0x52, 0x69, 0x13, 0x8c, 0xe2, 0x2c,
	0x8b, 0x6c, 0x04, 0x76, 0x89, 0xb2, 0x42, 0xf8, 0x00, 0x61, 0x9a, 0xea, 0xdb, 0x6c, 0x59, 0x01,
	0xae, 0x38, 0xd0, 0x22, 0x36, 0xbc, 0x47, 0x4b, 0x61, 0x16, 0x3a, 0x15, 0x31, 0xa5, 0x90, 0x06,
	0x75, 0x81, 0x29, 0x94, 0xf3, 0x15, 0x32, 0x77, 0x2c, 0x30, 0xcc, 0xb1, 0xb7, 0x33, 0xe6, 0x99,
	0x32, 0x7c, 0x95, 0x86, 0x60, 0x16, 0x3a, 0xc9, 0x94, 0xb9, 0x14, 0x97, 0x6b, 0x64, 0x6f, 0xc4,
	0xe5, 0x1d, 0xd6, 0x3b, 0x2f, 0x12, 0x91, 0x06, 0xe5, 0x89, 0xac, 0x13, 0xa3, 0x4b, 0xa0, 0x3b,
	0x10, 0x24, 0x89, 0x0b, 0x50, 0x62, 0x0c, 0x81, 0x9e, 0xc8, 0x38, 0xe6, 0x9e, 0x25, 0x39, 0xf0,
	0x14, 0x31, 0xdc, 0x57, 0xca, 0x8e, 0x91, 0x88, 0x45, 0x1a, 0x02, 0xdf, 0xd8, 0x99, 0xd9, 0xbd,
	0xee, 0x2f, 0x23, 0x36, 0xb0, 0x90, 0xf7, 0x2e, 0x5b, 0x55, 0x22, 0x92, 0x22, 0x35, 0x81, 0x01,
	0x41, 0x65, 0x64, 0x93, 0x3c, 0xf5, 0x1c, 0xfc, 0x02, 0x44, 0x32, 0x8c, 0xbc, 0x1d, 0xd6, 0x8d,
	0xa4, 0x82, 0x8a, 0xb4, 0x65, 0x57, 0x85, 0x98, 0x63, 0x6c, 0xb3, 0x4e, 0x0c, 0x62, 0x5c, 0x80,
	0x8c, 0xf8, 0x0d, 0x1b, 0x19, 0x65, 0xdb, 0x7b, 0x9f, 0xad, 0xb7, 0x46, 0x49, 0x45, 0x02, 0xfc,
	0x26, 0x95, 0x86, 0xd5, 0xc6, 0x38, 0x5f, 0x8b, 0x04, 0xbc, 0x77, 0xd8, 0x4a, 0x3d, 0x12, 0x11,
	0x39, 0x11, 0xbb, 0xe5, 0x58, 0xc4, 0xba, 0xec, 0x31, 0xce, 0xc6, 0x19, 0x7f, 0x83, 0xc2, 0xaa,
	0xe9, 0xf1, 0xab, 0x6c, 0x9c, 0xb5, 0x3d, 0x12, 0x71, 0x9b, 0x88, 0x95, 0x47, 0x62, 0x1d, 0xb0,
	0xad, 0x96, 0xc7, 0x30, 0x4b, 0xf2, 0x18, 0x0c, 0xf0, 0x37, 0x69, 0x31, 0x1b, 0x0d, 0xaf, 0x87,
	0xce, 0x84, 0xe5, 0xa0, 0xf6, 0x5c, 0x75, 0x78, 0x8b, 0x3a, 0xac, 0x95, 0xde, 0x2b, 0xf6, 0x5d,
	0xb6, 0x92, 0x67, 0x5a, 0x52, 0xf9, 0xc0, 0x34, 0xd4, 0xfc, 0x96, 0xdd, 0xea, 0x12, 0xfd, 0x16,
	0x41, 0xa4, 0xa5, 0x30, 0x16, 0x0d, 0xda, 0xff, 0x59, 0x5a, 0x89, 0x5a, 0x5a, 0xab, 0xf4, 0xbd,
	0x7d, 0xa9, 0xf4, 0x3d, 0x62, 0x2c, 0x97, 0x98, 0x2b, 0x23, 0x91, 0x6a, 0xbe, 0x43, 0x29, 0xbd,
	0x65, 0x53, 0x1a, 0xaf, 0xa8, 0x53, 0x88, 0x21, 0x34, 0xbf, 0xb9, 0x80, 0xd4, 0xf8, 0x4b, 0x44,
	0x1c, 0x88, 0x54, 0x7b, 0x7d, 0xd6, 0xb3, 0x29, 0xaa, 0xe1, 0x87, 0x20, 0x2d, 0x12, 0x7e, 0xdb,
	0x5e, 0xe5, 0x04, 0x9e, 0xc2, 0x0f, 0x5f, 0x17, 0x09, 0xc6, 0x54, 0x99, 0x1b, 0x46, 0x18, 0xe0,
	0x7d, 0x9a, 0x9b, 0xcb, 0x17, 0xcc, 0x41, 0xc0, 0x44, 0x2b, 0x77, 0x72, 0x5c, 0xc8, 0x38, 0xc2,
	0x78, 0xb9, 0x63, 0x13, 0xcd, 0xe1, 0xcf, 0x10, 0x1e, 0x46, 0x38, 0x20, 0xed, 0x5f, 0x45, 0x7b,
	0xc7, 0x7a, 0x43, 0xb0, 0xe4, 0x34, 0xbc, 0xd1, 0x36, 0x1b, 0x31, 0xe6, 0x77, 0x29, 0x22, 0x56,
	0x1a, 0x47, 0xf2, 0x42, 0x8c, 0x2b, 0x6f, 0x15, 0xed, 0x5d, 0xa2, 0x2d, 0x97, 0x07, 0x81, 0x1c,
	0x9b, 0xb9, 0x12, 0x34, 0x8e, 0x76, 0xcf, 0x86, 0xa9, 0x05, 0x86, 0x91, 0xcb, 0x5c, 0x34, 0x52,
	0x66, 0xee, 0x56, 0x99, 0x2b, 0x41, 0x53, 0x6a, 0x7e, 0xc9, 0x36, 0x47, 0x2a, 0x13, 0x51, 0x28,
	0xb0, 0xa2, 0x04, 0xe1, 0xb9, 0x48, 0x53, 0x88, 0x35, 0xff, 0x80, 0x36, 0x98, 0xdb, 0x0d, 0x1e,
	0xd4, 0x8c, 0x43, 0x4b, 0xf0, 0x37, 0x46, 0xaf, 0x61, 0xba, 0x71, 0xc7, 0x7c, 0x48, 0x03, 0x95,
	0x77, 0xcc, 0xa7, 0x6c, 0x2d, 0x2c, 0xb4, 0xc9, 0x92, 0x80, 0xce, 0x37, 0x12, 0x46, 0xf0, 0xff,
	0xa7, 0x02, 0xbf, 0x69, 0x07, 0x38, 0x24, 0xeb, 0x33, 0x91, 0xc0, 0x91, 0x30, 0xc2, 0x5f, 0x09,
	0x5b, 0x6d, 0x5c, 0x85, 0x3d, 0xc5, 0xb3, 0x58, 0x8c, 0x35, 0xdf, 0xb3, 0xab, 0x20, 0xe8, 0x0b,
	0x44, 0x50, 0x05, 0xe6, 0x4a, 0x5e, 0x08, 0x03, 0x41, 0x02, 0x46, 0xe0, 0x00, 0xc1, 0x04, 0xa6,
	0xfc, 0x3e, 0x15, 0x32, 0xcf, 0xd9, 0x9e, 0x3b, 0xd3, 0x97, 0x30, 0xc5, 0x38, 0x6f, 0x9d, 0x81,
	0x95, 0x41, 0xfb, 0x36, 0xce, 0x1b, 0xa7, 0x40, 0x6a, 0x08, 0x6b, 0x4a, 0x7d, 0x0e, 0x96, 0xfa,
	0xc0, 0x46, 0x70, 0x79, 0x12, 0x96, 0x77, 0xa7, 0x0c, 0xb7, 0xac, 0x30, 0x61, 0x96, 0x00, 0x3f,
	0xb0, 0x35, 0x8c, 0xc0, 0x6f, 0x2c, 0x86, 0x24, 0x93, 0x15, 0x0a, 0x0b, 0x81, 0x15, 0xb5, 0x0f,
	0x2d, 0xa9, 0x06, 0x87, 0x91, 0xf7, 0x1e, 0x5b, 0x6b, 0x90, 0x48, 0xc1, 0xf2, 0x47, 0xc4, 0x5b,
	0xad, 0x71, 0x1f, 0x61, 0x2c, 0x1c, 0x39, 0x46, 0x1c, 0x6d, 0x6d, 0x79, 0x93, 0x3d, 0xb6, 0xdc,
	0x5c, 0x01, 0xed, 0xa2, 0x83, 0xfb, 0x7f, 0x74, 0x62, 0xe8, 0x52, 0xca, 0x90, 0xe6, 0xd2, 0x01,
	0xe6, 0x0d, 0x5d, 0xc8, 0x1d, 0x7f, 0x41, 0xea, 0x13, 0x19, 0x4e, 0xf0, 0xae, 0xc5, 0x45, 0xd3,
	0x7d, 0xdc, 0xf3, 0xe9, 0xf7, 0x65, 0x4d, 0xd3, 0x2b, 0x35, 0x4d, 0xff, 0x1f, 0x33, 0xec, 0xe6,
	0x4f, 0x04, 0x0c, 0x66, 0x19, 0x69, 0x76, 0x35, 0x0d, 0x42, 0xcc, 0x6f, 0x2b, 0xa3, 0x96, 0x1d,
	0x76, 0x88, 0x29, 0xbe, 0xc3, 0x96, 0x23, 0xd0, 0xa1, 0x92, 0x39, 0x2d, 0xe1, 0xba, 0x8b, 0xf5,
	0x1a, 0xf2, 0x06, 0x6c, 0xbd, 0x19, 0xad, 0x32, 0x3d, 0xcb, 0x4a, 0x1d, 0xbf, 0xf5, 0x5a, 0xa8,
	0x0e, 0xd3, 0xb3, 0xcc, 0x5f, 0x1b, 0xb5, 0x01, 0xba, 0x67, 0x62, 0x91, 0x8e, 0x0b, 0xbc, 0x68,
	0x68, 0x26, 0x73, 0xb6, 0x18, 0x97, 0x20, 0x4e, 0xa5, 0xff, 0xad, 0xd3, 0x39, 0xed, 0xc0, 0xc4,
	0xba, 0xdb, 0x0c, 0xe4, 0x4a, 0xed, 0x74, 0xeb, 0x80, 0x1d, 0x46, 0x56, 0x17, 0xe4, 0xb6, 0xd2,
	0x5f, 0x2f, 0xd5, 0x62, 0x8e, 0x45, 0xbe, 0x3f, 0x74, 0xfb, 0x7f, 0x69, 0x9a, 0x57, 0x7c, 0xe5,
	0xf4, 0x9a, 0x5f, 0x39, 0x1e, 0x9b, 0x6b, 0x78, 0xa3, 0xdf, 0xfd, 0x7f, 0x79, 0x4e, 0xf1, 0x94,
	0x17, 0xe8, 0x7f, 0xf1, 0xf1, 0x36, 0x5b, 0x76, 0x22, 0x19, 0x3f, 0x4d, 0xdc, 0x81, 0xb2, 0xbc,
	0xf5, 0x0d, 0x73, 0xe5, 0xb1, 0x7a, 0x5b, 0x8c, 0x14, 0x78, 0xb0, 0x4f, 0x5b, 0xd5, 0xf3, 0xe7,
	0xb1, 0xb5, 0x5f, 0xc1, 0x0f, 0x48, 0xa6, 0x3a, 0xf8, 0x41, 0x05, 0x1f, 0x90, 0x26, 0x72, 0xf0,
	0x41, 0x05, 0x3f, 0x24, 0x65, 0xea, 0xe0, 0x87, 0x15, 0xfc, 0x88, 0x64, 0xa9, 0x83, 0x1f, 0x55,
	0xf0, 0x63, 0x52, 0xa2, 0x0e, 0x7e, 0x5c, 0xc1, 0x4f, 0xf8, 0xaf, 0x6a, 0xf8, 0x49, 0x05, 0x7f,
	0xc4, 0x3f, 0xae, 0xe1, 0x8f, 0x2a, 0xf8, 0x29, 0xff, 0xa4, 0x86, 0x9f, 0x7a, 0x1f, 0xb3, 0x6d,
	0xf8, 0x31, 0x87, 0xd0, 0x40, 0x54, 0x5e, 0x73, 0xa9, 0x51, 0x72, 0x54, 0x50, 0xd4, 0x31, 0x52,
	0x14, 0xbc, 0x64, 0xd8, 0xeb, 0xae, 0xb6, 0x63, 0xf8, 0xe8, 0x50, 0xc4, 0x10, 0x61, 0xa5, 0x51,
	0x32, 0xe4, 0xcb, 0xd4, 0xa1, 0x6b, 0xc1, 0xe7, 0x84, 0x21, 0x29, 0x57, 0x70, 0x21, 0xb3, 0x42,
	0x07, 0x4a, 0xa4, 0x13, 0xa7, 0xca, 0xba, 0x25, 0xe8, 0x8b, 0x74, 0x42, 0x9a, 0x4c, 0xa4, 0x13,
	0xaa, 0xb9, 0x63, 0x20, 0x4d, 0xb6, 0xee, 0x33, 0x84, 0x0e, 0x09, 0xa1, 0xca, 0x9e, 0xc5, 0x99,
	0xf5, 0xf0, 0x80, 0xd2, 0xb2, 0x83, 0x00, 0xf5, 0xc6, 0x79, 0x80, 0xd0, 0x59, 0x2a, 0x62, 0x4b,
	0x78, 0x4c, 0x84, 0x6e, 0x09, 0x12, 0x89, 0x34, 0x45, 0x3a, 0x09, 0x8c, 0x04, 0x15, 0x14, 0x79,
	0x24, 0x0c, 0x44, 0x7c, 0x40, 0xc4, 0x55, 0x34, 0xbc, 0x90, 0xa0, 0x5e, 0x5a, 0xd8, 0xdb, 0x64,
	0xf3, 0x28, 0xb1, 0x34, 0xa9, 0xbf, 0x9e, 0x6f, 0x1b, 0x58, 0xd2, 0x23, 0x10, 0xe6, 0x5c, 0x3b,
	0xd5, 0xe7, 0x5a, 0x28, 0x4a, 0x85, 0xd6, 0x52, 0x1b, 0xed, 0xe4, 0x5e, 0xd9, 0xa4, 0xfc, 0x02,
	0x14, 0x6d, 0xa5, 0xaa, 0x75, 0x62, 0xcf, 0x82, 0x4e, 0xd3, 0x7a, 0x6c, 0x6e, 0x9c, 0xc5, 0x91,
	0xd3, 0x78, 0xf4, 0x1b, 0x97, 0x1b, 0x0b, 0x6d, 0x82, 0x73, 0x69, 0x34, 0x09, 0x3b, 0xd4, 0x5b,
	0x42, 0x9b, 0x63, 0x69, 0xdc, 0x3c, 0x52, 0x09, 0xda, 0x89, 0x39, 0xd7, 0x42, 0x15, 0x87, 0x9d,
	0x83, 0x1c, 0x54, 0x90, 0xc8, 0xb4, 0x54, 0x71, 0x88, 0x9d, 0x80, 0x7a, 0x2e, 0x51, 0xc3, 0xb3,
	0xef, 0x4f, 0x2a, 0xbb, 0xd3, 0x71, 0xdf, 0x9f, 0x38, 0xeb, 0x2d, 0x46, 0xdc, 0x40, 0xe7, 0x90,
	0x1a, 0x12, 0x70, 0x3d, 0x7f, 0x09, 0x91, 0x53, 0x04, 0xf0, 0x8c, 0x28, 0x27, 0x22, 0x91, 0x88,
	0xb1, 0xd5, 0x6d, 0x3d, 0x9f, 0x21, 0x74, 0x44, 0x48, 0x2d, 0xf4, 0x1d, 0xe3, 0x0d, 0x7b, 0xdd,
	0x13, 0x56, 0x53, 0xc8, 0xc7, 0x39, 0x88, 0x58, 0xa6, 0x63, 0x92, 0x6a, 0x3d, 0x9f, 0xfc, 0x1e,
	0x5b, 0x08, 0xf7, 0x3e, 0x86, 0x0b, 0x88, 0x9d, 0x32, 0xb3, 0x0d, 0xac, 0x36, 0x28, 0xe9, 0x03,
	0xda, 0x15, 0x0d, 0x90, 0x3a, 0x1d, 0xd6, 0x45, 0xf4, 0x2b, 0xa1, 0xcd, 0x29, 0x40, 0xda, 0xc8,
	0x6b, 0x2a, 0x11, 0xb7, 0xa8, 0x44, 0xb8, 0xbc, 0x26, 0x61, 0x79, 0xc0, 0xb6, 0x74, 0x91, 0xa3,
	0x72, 0x0f, 0xc4, 0x48, 0xc6, 0xd2, 0x4c, 0x83, 0x0b, 0x11, 0x17, 0xe0, 0x44, 0xd8, 0x86, 0x33,
	0x7e, 0x6e, 0x6d, 0xdf, 0xa2, 0x09, 0xaf, 0x9f, 0x33, 0x80, 0x48, 0xa6, 0xe3, 0x20, 0x02, 0x43,
	0x99, 0xc0, 0x77, 0x6c, 0xdc, 0x38, 0xfc, 0xc8, 0xc1, 0x56, 0x62, 0x08, 0x15, 0x9e, 0xdb, 0x30,
	0xec, 0x97, 0x12, 0x03, 0x21, 0x0a, 0xc2, 0x27, 0xec, 0x66, 0x83, 0x10, 0x14, 0x69, 0x08, 0xca,
	0x08, 0x99, 0x9a, 0xa9, 0xd3, 0x50, 0x5b, 0x35, 0xf9, 0x65, 0x6d, 0xc4, 0x7e, 0x97, 0x3b, 0x94,
	0xb9, 0xf2, 0x0e, 0x7d, 0xf9, 0x6d, 0xa9, 0x76, 0x0f, 0x97, 0x36, 0xef, 0xb2, 0x55, 0xda, 0x6f,
	0x92, 0x74, 0x54, 0xfd, 0x48, 0x5d, 0xf5, 0xfc, 0x1e, 0xc2, 0x58, 0x2d, 0x0f, 0x11, 0xc4, 0x32,
	0x9d, 0x0b, 0x65, 0xa6, 0x58, 0xf0, 0x50, 0x57, 0x2d, 0xf8, 0x8b, 0xd4, 0x1e, 0x46, 0xa8, 0x0e,
	0x5c, 0x92, 0x37, 0x4f, 0xff, 0x89, 0x55, 0x07, 0xd6, 0x72, 0x5c, 0xc7, 0xc0, 0x1e, 0xdb, 0x70,
	0xec, 0x56, 0x28, 0x7c, 0x44, 0xf4, 0x75, 0x6b, 0x7a, 0xd1, 0x08, 0x88, 0x9a, 0xdf, 0x8a, 0x8b,
	0xa7, 0x4d, 0xfe, 0x71, 0x23, 0x3a, 0x6e, 0x33, 0x57, 0x5d, 0x02, 0x9b, 0xa0, 0xf7, 0xec, 0x47,
	0x8f, 0xc5, 0xbe, 0xa4, 0x34, 0xad, 0xab, 0x92, 0xcb, 0xd6, 0xdd, 0x66, 0x55, 0x3a, 0xb2, 0x39,
	0x7b, 0x97, 0xad, 0x38, 0x52, 0x99, 0xba, 0xef, 0x11, 0xcb, 0x75, 0xfd, 0xdc, 0x25, 0xf0, 0xfb,
	0x6c, 0x3d, 0x8c, 0x85, 0x4c, 0x20, 0x0a, 0xce, 0x84, 0x4a, 0x02, 0x4a, 0xd4, 0xf7, 0xad, 0x9e,
	0x70, 0x86, 0x2f, 0x84, 0x4a, 0x9e, 0x61, 0xce, 0xe2, 0xd4, 0x5c, 0x6c, 0x11, 0xed, 0x03, 0x1b,
	0xdb, 0x0e, 0x23, 0xca, 0x5d, 0xb6, 0x52, 0xba, 0x73, 0x19, 0x6c, 0xc5, 0x61, 0xcf, 0xa1, 0x47,
	0x36, 0x91, 0x1b, 0xb4, 0x44, 0x6a, 0x0d, 0x9a, 0x14, 0x62, 0x4d, 0x7b, 0x4e, 0x20, 0xd6, 0x01,
	0x67, 0xb6, 0x2a, 0xd0, 0xb5, 0xbc, 0xcf, 0xd8, 0x5a, 0x19, 0xdc, 0x45, 0x3e, 0x56, 0x22, 0x02,
	0xcd, 0xef, 0x93, 0x30, 0x70, 0x12, 0xd3, 0x85, 0xf7, 0x4b, 0x6b, 0xf4, 0x57, 0x45, 0xab, 0xad,
	0xbd, 0x3f, 0xb0, 0x6d, 0x11, 0x45, 0x12, 0x6b, 0xbc, 0x88, 0x83, 0x22, 0x95, 0x46, 0x07, 0x32,
	0x45, 0x71, 0x94, 0xa9, 0x29, 0xdf, 0x27, 0x57, 0xb7, 0x9c, 0xab, 0x8a, 0xf7, 0x32, 0x95, 0x66,
	0x58, 0x92, 0x7c, 0x2e, 0x5a, 0x06, 0x5d, 0x59, 0xbc, 0x4f, 0xd8, 0x6a, 0x0e, 0x2a, 0x11, 0x29,
	0x8a, 0xb9, 0x51, 0x71, 0x76, 0xa6, 0xf9, 0x2f, 0x9a, 0x93, 0x3b, 0x29, 0x8d, 0x03, 0xb4, 0xf9,
	0x2b, 0x79, 0xab, 0x7d, 0xa5, 0x7e, 0x3e, 0xf8, 0x1f, 0xf4, 0xf3, 0x53, 0xc6, 0xdd, 0x1b, 0x4f,
	0x1e, 0x17, 0x3a, 0xd0, 0xc5, 0xa8, 0x56, 0x59, 0x0f, 0x29, 0xab, 0x6f, 0x58, 0xfb, 0x49, 0x5c,
	0xe8, 0xd3, 0x86, 0x15, 0x6b, 0x72, 0x0a, 0x26, 0x78, 0x95, 0x29, 0x73, 0xee, 0xf4, 0x67, 0x27,
	0x05, 0xf3, 0x1d, 0xb6, 0xf1, 0xc8, 0x46, 0x99, 0x09, 0x22, 0x79, 0x76, 0x26, 0xc3, 0x22, 0x36,
	0x53, 0xfe, 0x4b, 0x7b, 0x64, 0xa3, 0xcc, 0x1c, 0x55, 0x60, 0x9d, 0x8f, 0x32, 0x9c, 0x04, 0x99,
	0x8a, 0x40, 0xf1, 0xcf, 0x1a, 0xf9, 0x28, 0xc3, 0xc9, 0x37, 0x08, 0x62, 0xdc, 0xd9, 0xb7, 0x44,
	0x41, 0x97, 0x66, 0x94, 0x25, 0x10, 0xf1, 0x5f, 0xdb, 0xa2, 0x43, 0x6f, 0x8a, 0x02, 0xef, 0x4d,
	0x82, 0xb1, 0x34, 0x56, 0xdc, 0x51, 0x96, 0x16, 0x9a, 0x7f, 0x6e, 0xaf, 0x3f, 0x47, 0x1c, 0x20,
	0xf6, 0x13, 0x6f, 0x5b, 0x87, 0x3f, 0xf1, 0xb6, 0xf5, 0x27, 0xa7, 0xf9, 0xda, 0x87, 0x41, 0xdf,
	0xb8, 0xad, 0xb3, 0x73, 0x9a, 0xaf, 0xd7, 0x3a, 0x24, 0x2a, 0x83, 0x46, 0x84, 0x13, 0x57, 0x71,
	0xec, 0x43, 0x20, 0x23, 0x88, 0xca, 0x4d, 0xff, 0xb7, 0xec, 0xad, 0xff, 0x14, 0x3d, 0xb8, 0xd5,
	0x18, 0x75, 0xb6, 0x8a, 0x5b, 0x75, 0xdc, 0x41, 0x80, 0x6a, 0xf8, 0x26, 0x23, 0xf1, 0xa2, 0xf9,
	0x75, 0x7a, 0x22, 0xb2, 0x8d, 0xfe, 0xef, 0xdc, 0x8c, 0xdb, 0xb1, 0x4d, 0x77, 0xb3, 0x45, 0xca,
	0xc7, 0x38, 0xd7, 0x24, 0x35, 0x5f, 0x3f, 0x53, 0xd2, 0xef, 0xfa, 0xee, 0xb1, 0xef, 0x93, 0xb6,
	0xd1, 0x7f, 0xc9, 0x7a, 0x76, 0x33, 0x64, 0x38, 0xa1, 0x2f, 0xe9, 0x9f, 0xf5, 0x85, 0x30, 0x7b,
	0xf5, 0x17, 0xc2, 0x6c, 0x29, 0x25, 0x0f, 0xfe, 0x39, 0xc3, 0xd8, 0x20, 0x33, 0xa7, 0xa0, 0x2e,
	0x64, 0x08, 0xde, 0x53, 0xd6, 0x7b, 0x06, 0xa6, 0x7e, 0xf3, 0xf7, 0xbc, 0xbd, 0xd7, 0xfe, 0x33,
	0xd8, 0x5e, 0xdf, 0xbb, 0xfc, 0xa7, 0x40, 0xff, 0x9a, 0x77, 0xc4, 0xd6, 0x9f, 0x81, 0x69, 0x3f,
	0xec, 0x7a, 0x37, 0xf6, 0xae, 0x7c, 0x1f, 0xde, 0xde, 0xda, 0xbb, 0xea, 0x05, 0xb8, 0x7f, 0xcd,
	0xfb, 0x94, 0xad, 0x96, 0x5e, 0xca, 0x77, 0xc3, 0xcd, 0xbd, 0x2b, 0x1e, 0x38, 0xb7, 0x37, 0xf6,
	0x5e, 0x7f, 0xc4, 0xec, 0x5f, 0x1b, 0xac, 0xfe, 0xbe, 0xa7, 0xcf, 0x85, 0x82, 0xe8, 0xbe, 0xfd,
	0xeb, 0x63, 0xb4, 0x40, 0xff, 0x7d, 0x3c, 0xfc, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0xf0, 0x35,
	0xae, 0xe7, 0x0b, 0x19, 0x00, 0x00,
}
