// Code generated by protoc-gen-go. DO NOT EDIT.
// source: bot.proto

/*
Package bot is a generated protocol buffer package.

It is generated from these files:
	bot.proto

It has these top-level messages:
	PlayerCardRequest
	PlayerCardResult
	PlayerSlot
	PlayerStat
	PlayerHero
	PlayerItem
	MatchesHistoryRequest
	MatchesHistoryResult
	Match
	MatchDetailsRequest
	MatchDetailsResult
	MatchDetails
	MatchPlayers
	MatchPickBans
*/
package bot

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type PlayerCardRequest struct {
	PlayerId uint64 `protobuf:"varint,1,opt,name=player_id,json=playerId" json:"player_id,omitempty"`
}

func (m *PlayerCardRequest) Reset()                    { *m = PlayerCardRequest{} }
func (m *PlayerCardRequest) String() string            { return proto.CompactTextString(m) }
func (*PlayerCardRequest) ProtoMessage()               {}
func (*PlayerCardRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *PlayerCardRequest) GetPlayerId() uint64 {
	if m != nil {
		return m.PlayerId
	}
	return 0
}

type PlayerCardResult struct {
	AccountId          uint64        `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	BackgroundDefIndex uint64        `protobuf:"varint,2,opt,name=background_def_index,json=backgroundDefIndex" json:"background_def_index,omitempty"`
	Slots              []*PlayerSlot `protobuf:"bytes,3,rep,name=slots" json:"slots,omitempty"`
	BadgePoints        uint64        `protobuf:"varint,4,opt,name=badge_points,json=badgePoints" json:"badge_points,omitempty"`
}

func (m *PlayerCardResult) Reset()                    { *m = PlayerCardResult{} }
func (m *PlayerCardResult) String() string            { return proto.CompactTextString(m) }
func (*PlayerCardResult) ProtoMessage()               {}
func (*PlayerCardResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *PlayerCardResult) GetAccountId() uint64 {
	if m != nil {
		return m.AccountId
	}
	return 0
}

func (m *PlayerCardResult) GetBackgroundDefIndex() uint64 {
	if m != nil {
		return m.BackgroundDefIndex
	}
	return 0
}

func (m *PlayerCardResult) GetSlots() []*PlayerSlot {
	if m != nil {
		return m.Slots
	}
	return nil
}

func (m *PlayerCardResult) GetBadgePoints() uint64 {
	if m != nil {
		return m.BadgePoints
	}
	return 0
}

type PlayerSlot struct {
	SlotId uint64 `protobuf:"varint,1,opt,name=slot_id,json=slotId" json:"slot_id,omitempty"`
	// Types that are valid to be assigned to Stats:
	//	*PlayerSlot_Stat
	//	*PlayerSlot_Hero
	//	*PlayerSlot_Item
	Stats isPlayerSlot_Stats `protobuf_oneof:"stats"`
}

func (m *PlayerSlot) Reset()                    { *m = PlayerSlot{} }
func (m *PlayerSlot) String() string            { return proto.CompactTextString(m) }
func (*PlayerSlot) ProtoMessage()               {}
func (*PlayerSlot) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type isPlayerSlot_Stats interface {
	isPlayerSlot_Stats()
}

type PlayerSlot_Stat struct {
	Stat *PlayerStat `protobuf:"bytes,2,opt,name=stat,oneof"`
}
type PlayerSlot_Hero struct {
	Hero *PlayerHero `protobuf:"bytes,3,opt,name=hero,oneof"`
}
type PlayerSlot_Item struct {
	Item *PlayerItem `protobuf:"bytes,4,opt,name=item,oneof"`
}

func (*PlayerSlot_Stat) isPlayerSlot_Stats() {}
func (*PlayerSlot_Hero) isPlayerSlot_Stats() {}
func (*PlayerSlot_Item) isPlayerSlot_Stats() {}

func (m *PlayerSlot) GetStats() isPlayerSlot_Stats {
	if m != nil {
		return m.Stats
	}
	return nil
}

func (m *PlayerSlot) GetSlotId() uint64 {
	if m != nil {
		return m.SlotId
	}
	return 0
}

func (m *PlayerSlot) GetStat() *PlayerStat {
	if x, ok := m.GetStats().(*PlayerSlot_Stat); ok {
		return x.Stat
	}
	return nil
}

func (m *PlayerSlot) GetHero() *PlayerHero {
	if x, ok := m.GetStats().(*PlayerSlot_Hero); ok {
		return x.Hero
	}
	return nil
}

func (m *PlayerSlot) GetItem() *PlayerItem {
	if x, ok := m.GetStats().(*PlayerSlot_Item); ok {
		return x.Item
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*PlayerSlot) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _PlayerSlot_OneofMarshaler, _PlayerSlot_OneofUnmarshaler, _PlayerSlot_OneofSizer, []interface{}{
		(*PlayerSlot_Stat)(nil),
		(*PlayerSlot_Hero)(nil),
		(*PlayerSlot_Item)(nil),
	}
}

func _PlayerSlot_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*PlayerSlot)
	// stats
	switch x := m.Stats.(type) {
	case *PlayerSlot_Stat:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Stat); err != nil {
			return err
		}
	case *PlayerSlot_Hero:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Hero); err != nil {
			return err
		}
	case *PlayerSlot_Item:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Item); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("PlayerSlot.Stats has unexpected type %T", x)
	}
	return nil
}

func _PlayerSlot_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*PlayerSlot)
	switch tag {
	case 2: // stats.stat
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PlayerStat)
		err := b.DecodeMessage(msg)
		m.Stats = &PlayerSlot_Stat{msg}
		return true, err
	case 3: // stats.hero
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PlayerHero)
		err := b.DecodeMessage(msg)
		m.Stats = &PlayerSlot_Hero{msg}
		return true, err
	case 4: // stats.item
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PlayerItem)
		err := b.DecodeMessage(msg)
		m.Stats = &PlayerSlot_Item{msg}
		return true, err
	default:
		return false, nil
	}
}

func _PlayerSlot_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*PlayerSlot)
	// stats
	switch x := m.Stats.(type) {
	case *PlayerSlot_Stat:
		s := proto.Size(x.Stat)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *PlayerSlot_Hero:
		s := proto.Size(x.Hero)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *PlayerSlot_Item:
		s := proto.Size(x.Item)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type PlayerStat struct {
	StatId    string `protobuf:"bytes,1,opt,name=stat_id,json=statId" json:"stat_id,omitempty"`
	StatScore uint64 `protobuf:"varint,2,opt,name=stat_score,json=statScore" json:"stat_score,omitempty"`
}

func (m *PlayerStat) Reset()                    { *m = PlayerStat{} }
func (m *PlayerStat) String() string            { return proto.CompactTextString(m) }
func (*PlayerStat) ProtoMessage()               {}
func (*PlayerStat) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *PlayerStat) GetStatId() string {
	if m != nil {
		return m.StatId
	}
	return ""
}

func (m *PlayerStat) GetStatScore() uint64 {
	if m != nil {
		return m.StatScore
	}
	return 0
}

type PlayerHero struct {
	HeroId   uint64 `protobuf:"varint,1,opt,name=hero_id,json=heroId" json:"hero_id,omitempty"`
	HeroWins uint64 `protobuf:"varint,2,opt,name=hero_wins,json=heroWins" json:"hero_wins,omitempty"`
}

func (m *PlayerHero) Reset()                    { *m = PlayerHero{} }
func (m *PlayerHero) String() string            { return proto.CompactTextString(m) }
func (*PlayerHero) ProtoMessage()               {}
func (*PlayerHero) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *PlayerHero) GetHeroId() uint64 {
	if m != nil {
		return m.HeroId
	}
	return 0
}

func (m *PlayerHero) GetHeroWins() uint64 {
	if m != nil {
		return m.HeroWins
	}
	return 0
}

type PlayerItem struct {
	SerializedItem string `protobuf:"bytes,1,opt,name=serialized_item,json=serializedItem" json:"serialized_item,omitempty"`
	ItemId         string `protobuf:"bytes,2,opt,name=item_id,json=itemId" json:"item_id,omitempty"`
}

func (m *PlayerItem) Reset()                    { *m = PlayerItem{} }
func (m *PlayerItem) String() string            { return proto.CompactTextString(m) }
func (*PlayerItem) ProtoMessage()               {}
func (*PlayerItem) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *PlayerItem) GetSerializedItem() string {
	if m != nil {
		return m.SerializedItem
	}
	return ""
}

func (m *PlayerItem) GetItemId() string {
	if m != nil {
		return m.ItemId
	}
	return ""
}

type MatchesHistoryRequest struct {
	PlayerId uint64 `protobuf:"varint,1,opt,name=player_id,json=playerId" json:"player_id,omitempty"`
}

func (m *MatchesHistoryRequest) Reset()                    { *m = MatchesHistoryRequest{} }
func (m *MatchesHistoryRequest) String() string            { return proto.CompactTextString(m) }
func (*MatchesHistoryRequest) ProtoMessage()               {}
func (*MatchesHistoryRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *MatchesHistoryRequest) GetPlayerId() uint64 {
	if m != nil {
		return m.PlayerId
	}
	return 0
}

type MatchesHistoryResult struct {
	Matches []*Match `protobuf:"bytes,1,rep,name=matches" json:"matches,omitempty"`
}

func (m *MatchesHistoryResult) Reset()                    { *m = MatchesHistoryResult{} }
func (m *MatchesHistoryResult) String() string            { return proto.CompactTextString(m) }
func (*MatchesHistoryResult) ProtoMessage()               {}
func (*MatchesHistoryResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *MatchesHistoryResult) GetMatches() []*Match {
	if m != nil {
		return m.Matches
	}
	return nil
}

type Match struct {
	MatchId          string `protobuf:"bytes,1,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
	StartTime        uint64 `protobuf:"varint,2,opt,name=start_time,json=startTime" json:"start_time,omitempty"`
	HeroId           uint64 `protobuf:"varint,3,opt,name=hero_id,json=heroId" json:"hero_id,omitempty"`
	Winner           bool   `protobuf:"varint,4,opt,name=winner" json:"winner,omitempty"`
	GameMode         uint64 `protobuf:"varint,5,opt,name=game_mode,json=gameMode" json:"game_mode,omitempty"`
	LobbyType        uint64 `protobuf:"varint,6,opt,name=lobby_type,json=lobbyType" json:"lobby_type,omitempty"`
	Duration         uint64 `protobuf:"varint,7,opt,name=duration" json:"duration,omitempty"`
	Engine           uint64 `protobuf:"varint,8,opt,name=engine" json:"engine,omitempty"`
	ActiveBattlePass bool   `protobuf:"varint,9,opt,name=active_battle_pass,json=activeBattlePass" json:"active_battle_pass,omitempty"`
}

func (m *Match) Reset()                    { *m = Match{} }
func (m *Match) String() string            { return proto.CompactTextString(m) }
func (*Match) ProtoMessage()               {}
func (*Match) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *Match) GetMatchId() string {
	if m != nil {
		return m.MatchId
	}
	return ""
}

func (m *Match) GetStartTime() uint64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *Match) GetHeroId() uint64 {
	if m != nil {
		return m.HeroId
	}
	return 0
}

func (m *Match) GetWinner() bool {
	if m != nil {
		return m.Winner
	}
	return false
}

func (m *Match) GetGameMode() uint64 {
	if m != nil {
		return m.GameMode
	}
	return 0
}

func (m *Match) GetLobbyType() uint64 {
	if m != nil {
		return m.LobbyType
	}
	return 0
}

func (m *Match) GetDuration() uint64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *Match) GetEngine() uint64 {
	if m != nil {
		return m.Engine
	}
	return 0
}

func (m *Match) GetActiveBattlePass() bool {
	if m != nil {
		return m.ActiveBattlePass
	}
	return false
}

type MatchDetailsRequest struct {
	MatchId uint64 `protobuf:"varint,1,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
}

func (m *MatchDetailsRequest) Reset()                    { *m = MatchDetailsRequest{} }
func (m *MatchDetailsRequest) String() string            { return proto.CompactTextString(m) }
func (*MatchDetailsRequest) ProtoMessage()               {}
func (*MatchDetailsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *MatchDetailsRequest) GetMatchId() uint64 {
	if m != nil {
		return m.MatchId
	}
	return 0
}

type MatchDetailsResult struct {
	Result uint64        `protobuf:"varint,1,opt,name=result" json:"result,omitempty"`
	Match  *MatchDetails `protobuf:"bytes,2,opt,name=match" json:"match,omitempty"`
	Vote   string        `protobuf:"bytes,3,opt,name=vote" json:"vote,omitempty"`
}

func (m *MatchDetailsResult) Reset()                    { *m = MatchDetailsResult{} }
func (m *MatchDetailsResult) String() string            { return proto.CompactTextString(m) }
func (*MatchDetailsResult) ProtoMessage()               {}
func (*MatchDetailsResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *MatchDetailsResult) GetResult() uint64 {
	if m != nil {
		return m.Result
	}
	return 0
}

func (m *MatchDetailsResult) GetMatch() *MatchDetails {
	if m != nil {
		return m.Match
	}
	return nil
}

func (m *MatchDetailsResult) GetVote() string {
	if m != nil {
		return m.Vote
	}
	return ""
}

type MatchDetails struct {
	Duration         uint64           `protobuf:"varint,1,opt,name=duration" json:"duration,omitempty"`
	StartTime        uint64           `protobuf:"varint,2,opt,name=startTime" json:"startTime,omitempty"`
	Players          []*MatchPlayers  `protobuf:"bytes,3,rep,name=players" json:"players,omitempty"`
	MatchId          string           `protobuf:"bytes,4,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
	TowerStatus      []uint64         `protobuf:"varint,5,rep,packed,name=tower_status,json=towerStatus" json:"tower_status,omitempty"`
	BarracksStatus   []uint64         `protobuf:"varint,6,rep,packed,name=barracks_status,json=barracksStatus" json:"barracks_status,omitempty"`
	Cluster          uint64           `protobuf:"varint,7,opt,name=cluster" json:"cluster,omitempty"`
	FirstBloodTime   uint64           `protobuf:"varint,8,opt,name=first_blood_time,json=firstBloodTime" json:"first_blood_time,omitempty"`
	ReplaySalt       uint64           `protobuf:"varint,9,opt,name=replay_salt,json=replaySalt" json:"replay_salt,omitempty"`
	LobbyType        uint64           `protobuf:"varint,10,opt,name=lobby_type,json=lobbyType" json:"lobby_type,omitempty"`
	HumanPlayers     uint64           `protobuf:"varint,11,opt,name=human_players,json=humanPlayers" json:"human_players,omitempty"`
	Leagueid         uint64           `protobuf:"varint,12,opt,name=leagueid" json:"leagueid,omitempty"`
	PositiveVotes    uint64           `protobuf:"varint,13,opt,name=positive_votes,json=positiveVotes" json:"positive_votes,omitempty"`
	NegativeVotes    uint64           `protobuf:"varint,14,opt,name=negative_votes,json=negativeVotes" json:"negative_votes,omitempty"`
	GameMode         uint64           `protobuf:"varint,15,opt,name=game_mode,json=gameMode" json:"game_mode,omitempty"`
	PicksBans        []*MatchPickBans `protobuf:"bytes,16,rep,name=picks_bans,json=picksBans" json:"picks_bans,omitempty"`
	ReplayState      string           `protobuf:"bytes,17,opt,name=replay_state,json=replayState" json:"replay_state,omitempty"`
	SeriesId         uint64           `protobuf:"varint,18,opt,name=series_id,json=seriesId" json:"series_id,omitempty"`
	SeriesType       uint64           `protobuf:"varint,19,opt,name=series_type,json=seriesType" json:"series_type,omitempty"`
	Engine           uint64           `protobuf:"varint,20,opt,name=engine" json:"engine,omitempty"`
	MatchFlags       uint64           `protobuf:"varint,21,opt,name=match_flags,json=matchFlags" json:"match_flags,omitempty"`
	RadiantTeamScore uint64           `protobuf:"varint,22,opt,name=radiant_team_score,json=radiantTeamScore" json:"radiant_team_score,omitempty"`
	DireTeamScore    uint64           `protobuf:"varint,23,opt,name=dire_team_score,json=direTeamScore" json:"dire_team_score,omitempty"`
	MatchOutcome     string           `protobuf:"bytes,24,opt,name=match_outcome,json=matchOutcome" json:"match_outcome,omitempty"`
	PreGameDuration  uint64           `protobuf:"varint,25,opt,name=pre_game_duration,json=preGameDuration" json:"pre_game_duration,omitempty"`
}

func (m *MatchDetails) Reset()                    { *m = MatchDetails{} }
func (m *MatchDetails) String() string            { return proto.CompactTextString(m) }
func (*MatchDetails) ProtoMessage()               {}
func (*MatchDetails) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *MatchDetails) GetDuration() uint64 {
	if m != nil {
		return m.Duration
	}
	return 0
}

func (m *MatchDetails) GetStartTime() uint64 {
	if m != nil {
		return m.StartTime
	}
	return 0
}

func (m *MatchDetails) GetPlayers() []*MatchPlayers {
	if m != nil {
		return m.Players
	}
	return nil
}

func (m *MatchDetails) GetMatchId() string {
	if m != nil {
		return m.MatchId
	}
	return ""
}

func (m *MatchDetails) GetTowerStatus() []uint64 {
	if m != nil {
		return m.TowerStatus
	}
	return nil
}

func (m *MatchDetails) GetBarracksStatus() []uint64 {
	if m != nil {
		return m.BarracksStatus
	}
	return nil
}

func (m *MatchDetails) GetCluster() uint64 {
	if m != nil {
		return m.Cluster
	}
	return 0
}

func (m *MatchDetails) GetFirstBloodTime() uint64 {
	if m != nil {
		return m.FirstBloodTime
	}
	return 0
}

func (m *MatchDetails) GetReplaySalt() uint64 {
	if m != nil {
		return m.ReplaySalt
	}
	return 0
}

func (m *MatchDetails) GetLobbyType() uint64 {
	if m != nil {
		return m.LobbyType
	}
	return 0
}

func (m *MatchDetails) GetHumanPlayers() uint64 {
	if m != nil {
		return m.HumanPlayers
	}
	return 0
}

func (m *MatchDetails) GetLeagueid() uint64 {
	if m != nil {
		return m.Leagueid
	}
	return 0
}

func (m *MatchDetails) GetPositiveVotes() uint64 {
	if m != nil {
		return m.PositiveVotes
	}
	return 0
}

func (m *MatchDetails) GetNegativeVotes() uint64 {
	if m != nil {
		return m.NegativeVotes
	}
	return 0
}

func (m *MatchDetails) GetGameMode() uint64 {
	if m != nil {
		return m.GameMode
	}
	return 0
}

func (m *MatchDetails) GetPicksBans() []*MatchPickBans {
	if m != nil {
		return m.PicksBans
	}
	return nil
}

func (m *MatchDetails) GetReplayState() string {
	if m != nil {
		return m.ReplayState
	}
	return ""
}

func (m *MatchDetails) GetSeriesId() uint64 {
	if m != nil {
		return m.SeriesId
	}
	return 0
}

func (m *MatchDetails) GetSeriesType() uint64 {
	if m != nil {
		return m.SeriesType
	}
	return 0
}

func (m *MatchDetails) GetEngine() uint64 {
	if m != nil {
		return m.Engine
	}
	return 0
}

func (m *MatchDetails) GetMatchFlags() uint64 {
	if m != nil {
		return m.MatchFlags
	}
	return 0
}

func (m *MatchDetails) GetRadiantTeamScore() uint64 {
	if m != nil {
		return m.RadiantTeamScore
	}
	return 0
}

func (m *MatchDetails) GetDireTeamScore() uint64 {
	if m != nil {
		return m.DireTeamScore
	}
	return 0
}

func (m *MatchDetails) GetMatchOutcome() string {
	if m != nil {
		return m.MatchOutcome
	}
	return ""
}

func (m *MatchDetails) GetPreGameDuration() uint64 {
	if m != nil {
		return m.PreGameDuration
	}
	return 0
}

type MatchPlayers struct {
	AccountId         uint64 `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	PlayerSlot        uint64 `protobuf:"varint,2,opt,name=player_slot,json=playerSlot" json:"player_slot,omitempty"`
	HeroId            uint64 `protobuf:"varint,3,opt,name=hero_id,json=heroId" json:"hero_id,omitempty"`
	Item_0            uint64 `protobuf:"varint,4,opt,name=item_0,json=item0" json:"item_0,omitempty"`
	Item_1            uint64 `protobuf:"varint,5,opt,name=item_1,json=item1" json:"item_1,omitempty"`
	Item_2            uint64 `protobuf:"varint,6,opt,name=item_2,json=item2" json:"item_2,omitempty"`
	Item_3            uint64 `protobuf:"varint,7,opt,name=item_3,json=item3" json:"item_3,omitempty"`
	Item_4            uint64 `protobuf:"varint,8,opt,name=item_4,json=item4" json:"item_4,omitempty"`
	Item_5            uint64 `protobuf:"varint,9,opt,name=item_5,json=item5" json:"item_5,omitempty"`
	Kills             uint64 `protobuf:"varint,10,opt,name=kills" json:"kills,omitempty"`
	Deaths            uint64 `protobuf:"varint,11,opt,name=deaths" json:"deaths,omitempty"`
	Assits            uint64 `protobuf:"varint,12,opt,name=assits" json:"assits,omitempty"`
	LeaverStatus      uint64 `protobuf:"varint,13,opt,name=leaver_status,json=leaverStatus" json:"leaver_status,omitempty"`
	Gold              uint64 `protobuf:"varint,14,opt,name=gold" json:"gold,omitempty"`
	LastHits          uint64 `protobuf:"varint,15,opt,name=last_hits,json=lastHits" json:"last_hits,omitempty"`
	Denies            uint64 `protobuf:"varint,16,opt,name=denies" json:"denies,omitempty"`
	GoldPerMin        uint64 `protobuf:"varint,17,opt,name=gold_per_min,json=goldPerMin" json:"gold_per_min,omitempty"`
	XPPerMin          uint64 `protobuf:"varint,18,opt,name=XP_per_min,json=XPPerMin" json:"XP_per_min,omitempty"`
	GoldSpent         uint64 `protobuf:"varint,19,opt,name=gold_spent,json=goldSpent" json:"gold_spent,omitempty"`
	HeroDamage        uint64 `protobuf:"varint,20,opt,name=hero_damage,json=heroDamage" json:"hero_damage,omitempty"`
	TowerDamage       uint64 `protobuf:"varint,21,opt,name=tower_damage,json=towerDamage" json:"tower_damage,omitempty"`
	HeroHealing       uint64 `protobuf:"varint,22,opt,name=hero_healing,json=heroHealing" json:"hero_healing,omitempty"`
	Level             uint64 `protobuf:"varint,23,opt,name=level" json:"level,omitempty"`
	PlayerName        string `protobuf:"bytes,24,opt,name=player_name,json=playerName" json:"player_name,omitempty"`
	PartyId           string `protobuf:"bytes,25,opt,name=party_id,json=partyId" json:"party_id,omitempty"`
	ActiveBattlePass  bool   `protobuf:"varint,26,opt,name=active_battle_pass,json=activeBattlePass" json:"active_battle_pass,omitempty"`
	NetWorth          uint64 `protobuf:"varint,27,opt,name=net_worth,json=netWorth" json:"net_worth,omitempty"`
	ScaledHeroDamage  uint64 `protobuf:"varint,28,opt,name=scaled_hero_damage,json=scaledHeroDamage" json:"scaled_hero_damage,omitempty"`
	ScaledTowerDamage uint64 `protobuf:"varint,29,opt,name=scaled_tower_damage,json=scaledTowerDamage" json:"scaled_tower_damage,omitempty"`
	ScaledHeroHealing uint64 `protobuf:"varint,30,opt,name=scaled_hero_healing,json=scaledHeroHealing" json:"scaled_hero_healing,omitempty"`
	Item_6            uint64 `protobuf:"varint,31,opt,name=item_6,json=item6" json:"item_6,omitempty"`
	Item_7            uint64 `protobuf:"varint,32,opt,name=item_7,json=item7" json:"item_7,omitempty"`
	Item_8            uint64 `protobuf:"varint,33,opt,name=item_8,json=item8" json:"item_8,omitempty"`
}

func (m *MatchPlayers) Reset()                    { *m = MatchPlayers{} }
func (m *MatchPlayers) String() string            { return proto.CompactTextString(m) }
func (*MatchPlayers) ProtoMessage()               {}
func (*MatchPlayers) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *MatchPlayers) GetAccountId() uint64 {
	if m != nil {
		return m.AccountId
	}
	return 0
}

func (m *MatchPlayers) GetPlayerSlot() uint64 {
	if m != nil {
		return m.PlayerSlot
	}
	return 0
}

func (m *MatchPlayers) GetHeroId() uint64 {
	if m != nil {
		return m.HeroId
	}
	return 0
}

func (m *MatchPlayers) GetItem_0() uint64 {
	if m != nil {
		return m.Item_0
	}
	return 0
}

func (m *MatchPlayers) GetItem_1() uint64 {
	if m != nil {
		return m.Item_1
	}
	return 0
}

func (m *MatchPlayers) GetItem_2() uint64 {
	if m != nil {
		return m.Item_2
	}
	return 0
}

func (m *MatchPlayers) GetItem_3() uint64 {
	if m != nil {
		return m.Item_3
	}
	return 0
}

func (m *MatchPlayers) GetItem_4() uint64 {
	if m != nil {
		return m.Item_4
	}
	return 0
}

func (m *MatchPlayers) GetItem_5() uint64 {
	if m != nil {
		return m.Item_5
	}
	return 0
}

func (m *MatchPlayers) GetKills() uint64 {
	if m != nil {
		return m.Kills
	}
	return 0
}

func (m *MatchPlayers) GetDeaths() uint64 {
	if m != nil {
		return m.Deaths
	}
	return 0
}

func (m *MatchPlayers) GetAssits() uint64 {
	if m != nil {
		return m.Assits
	}
	return 0
}

func (m *MatchPlayers) GetLeaverStatus() uint64 {
	if m != nil {
		return m.LeaverStatus
	}
	return 0
}

func (m *MatchPlayers) GetGold() uint64 {
	if m != nil {
		return m.Gold
	}
	return 0
}

func (m *MatchPlayers) GetLastHits() uint64 {
	if m != nil {
		return m.LastHits
	}
	return 0
}

func (m *MatchPlayers) GetDenies() uint64 {
	if m != nil {
		return m.Denies
	}
	return 0
}

func (m *MatchPlayers) GetGoldPerMin() uint64 {
	if m != nil {
		return m.GoldPerMin
	}
	return 0
}

func (m *MatchPlayers) GetXPPerMin() uint64 {
	if m != nil {
		return m.XPPerMin
	}
	return 0
}

func (m *MatchPlayers) GetGoldSpent() uint64 {
	if m != nil {
		return m.GoldSpent
	}
	return 0
}

func (m *MatchPlayers) GetHeroDamage() uint64 {
	if m != nil {
		return m.HeroDamage
	}
	return 0
}

func (m *MatchPlayers) GetTowerDamage() uint64 {
	if m != nil {
		return m.TowerDamage
	}
	return 0
}

func (m *MatchPlayers) GetHeroHealing() uint64 {
	if m != nil {
		return m.HeroHealing
	}
	return 0
}

func (m *MatchPlayers) GetLevel() uint64 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *MatchPlayers) GetPlayerName() string {
	if m != nil {
		return m.PlayerName
	}
	return ""
}

func (m *MatchPlayers) GetPartyId() string {
	if m != nil {
		return m.PartyId
	}
	return ""
}

func (m *MatchPlayers) GetActiveBattlePass() bool {
	if m != nil {
		return m.ActiveBattlePass
	}
	return false
}

func (m *MatchPlayers) GetNetWorth() uint64 {
	if m != nil {
		return m.NetWorth
	}
	return 0
}

func (m *MatchPlayers) GetScaledHeroDamage() uint64 {
	if m != nil {
		return m.ScaledHeroDamage
	}
	return 0
}

func (m *MatchPlayers) GetScaledTowerDamage() uint64 {
	if m != nil {
		return m.ScaledTowerDamage
	}
	return 0
}

func (m *MatchPlayers) GetScaledHeroHealing() uint64 {
	if m != nil {
		return m.ScaledHeroHealing
	}
	return 0
}

func (m *MatchPlayers) GetItem_6() uint64 {
	if m != nil {
		return m.Item_6
	}
	return 0
}

func (m *MatchPlayers) GetItem_7() uint64 {
	if m != nil {
		return m.Item_7
	}
	return 0
}

func (m *MatchPlayers) GetItem_8() uint64 {
	if m != nil {
		return m.Item_8
	}
	return 0
}

type MatchPickBans struct {
	IsPick bool  `protobuf:"varint,1,opt,name=is_pick,json=isPick" json:"is_pick,omitempty"`
	Team   int64 `protobuf:"varint,2,opt,name=team" json:"team,omitempty"`
	HeroId int64 `protobuf:"varint,3,opt,name=hero_id,json=heroId" json:"hero_id,omitempty"`
}

func (m *MatchPickBans) Reset()                    { *m = MatchPickBans{} }
func (m *MatchPickBans) String() string            { return proto.CompactTextString(m) }
func (*MatchPickBans) ProtoMessage()               {}
func (*MatchPickBans) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *MatchPickBans) GetIsPick() bool {
	if m != nil {
		return m.IsPick
	}
	return false
}

func (m *MatchPickBans) GetTeam() int64 {
	if m != nil {
		return m.Team
	}
	return 0
}

func (m *MatchPickBans) GetHeroId() int64 {
	if m != nil {
		return m.HeroId
	}
	return 0
}

func init() {
	proto.RegisterType((*PlayerCardRequest)(nil), "PlayerCardRequest")
	proto.RegisterType((*PlayerCardResult)(nil), "PlayerCardResult")
	proto.RegisterType((*PlayerSlot)(nil), "PlayerSlot")
	proto.RegisterType((*PlayerStat)(nil), "PlayerStat")
	proto.RegisterType((*PlayerHero)(nil), "PlayerHero")
	proto.RegisterType((*PlayerItem)(nil), "PlayerItem")
	proto.RegisterType((*MatchesHistoryRequest)(nil), "MatchesHistoryRequest")
	proto.RegisterType((*MatchesHistoryResult)(nil), "MatchesHistoryResult")
	proto.RegisterType((*Match)(nil), "Match")
	proto.RegisterType((*MatchDetailsRequest)(nil), "MatchDetailsRequest")
	proto.RegisterType((*MatchDetailsResult)(nil), "MatchDetailsResult")
	proto.RegisterType((*MatchDetails)(nil), "MatchDetails")
	proto.RegisterType((*MatchPlayers)(nil), "MatchPlayers")
	proto.RegisterType((*MatchPickBans)(nil), "MatchPickBans")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for BotService service

type BotServiceClient interface {
	GetPlayerCard(ctx context.Context, in *PlayerCardRequest, opts ...grpc.CallOption) (*PlayerCardResult, error)
	GetMatchesHistory(ctx context.Context, in *MatchesHistoryRequest, opts ...grpc.CallOption) (*MatchesHistoryResult, error)
	GetMatchDetails(ctx context.Context, in *MatchDetailsRequest, opts ...grpc.CallOption) (*MatchDetailsResult, error)
}

type botServiceClient struct {
	cc *grpc.ClientConn
}

func NewBotServiceClient(cc *grpc.ClientConn) BotServiceClient {
	return &botServiceClient{cc}
}

func (c *botServiceClient) GetPlayerCard(ctx context.Context, in *PlayerCardRequest, opts ...grpc.CallOption) (*PlayerCardResult, error) {
	out := new(PlayerCardResult)
	err := grpc.Invoke(ctx, "/BotService/GetPlayerCard", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botServiceClient) GetMatchesHistory(ctx context.Context, in *MatchesHistoryRequest, opts ...grpc.CallOption) (*MatchesHistoryResult, error) {
	out := new(MatchesHistoryResult)
	err := grpc.Invoke(ctx, "/BotService/GetMatchesHistory", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *botServiceClient) GetMatchDetails(ctx context.Context, in *MatchDetailsRequest, opts ...grpc.CallOption) (*MatchDetailsResult, error) {
	out := new(MatchDetailsResult)
	err := grpc.Invoke(ctx, "/BotService/GetMatchDetails", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for BotService service

type BotServiceServer interface {
	GetPlayerCard(context.Context, *PlayerCardRequest) (*PlayerCardResult, error)
	GetMatchesHistory(context.Context, *MatchesHistoryRequest) (*MatchesHistoryResult, error)
	GetMatchDetails(context.Context, *MatchDetailsRequest) (*MatchDetailsResult, error)
}

func RegisterBotServiceServer(s *grpc.Server, srv BotServiceServer) {
	s.RegisterService(&_BotService_serviceDesc, srv)
}

func _BotService_GetPlayerCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayerCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServiceServer).GetPlayerCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BotService/GetPlayerCard",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServiceServer).GetPlayerCard(ctx, req.(*PlayerCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotService_GetMatchesHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MatchesHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServiceServer).GetMatchesHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BotService/GetMatchesHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServiceServer).GetMatchesHistory(ctx, req.(*MatchesHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BotService_GetMatchDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MatchDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BotServiceServer).GetMatchDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BotService/GetMatchDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BotServiceServer).GetMatchDetails(ctx, req.(*MatchDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _BotService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "BotService",
	HandlerType: (*BotServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPlayerCard",
			Handler:    _BotService_GetPlayerCard_Handler,
		},
		{
			MethodName: "GetMatchesHistory",
			Handler:    _BotService_GetMatchesHistory_Handler,
		},
		{
			MethodName: "GetMatchDetails",
			Handler:    _BotService_GetMatchDetails_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bot.proto",
}

func init() { proto.RegisterFile("bot.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1453 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x57, 0xcb, 0x72, 0xdb, 0xc6,
	0x12, 0x95, 0x2c, 0x3e, 0xc4, 0x16, 0xa9, 0xc7, 0xe8, 0x61, 0x58, 0xb6, 0xaf, 0x24, 0xb8, 0xee,
	0xb5, 0xeb, 0x56, 0x42, 0xcb, 0xf2, 0x4b, 0xab, 0x2c, 0x14, 0x55, 0x2c, 0x2e, 0xec, 0xa8, 0x28,
	0x25, 0x76, 0x65, 0x83, 0x1a, 0x12, 0x2d, 0x72, 0x4a, 0x20, 0x80, 0xcc, 0x0c, 0xa5, 0x28, 0x5f,
	0x91, 0x5d, 0xbe, 0x21, 0xff, 0x92, 0x3f, 0xc8, 0x8f, 0x64, 0x99, 0xea, 0x9e, 0x01, 0x41, 0xca,
	0x4a, 0x25, 0x3b, 0xf4, 0xe9, 0x33, 0x33, 0x8d, 0xd3, 0x0f, 0x0c, 0xa0, 0xd1, 0xcb, 0x6c, 0x3b,
	0xd7, 0x99, 0xcd, 0xc2, 0x7d, 0x58, 0x3b, 0x4d, 0xe4, 0x0d, 0xea, 0xaf, 0xa5, 0x8e, 0xbb, 0xf8,
	0xe3, 0x18, 0x8d, 0x15, 0x0f, 0xa1, 0x91, 0x33, 0x18, 0xa9, 0x38, 0x98, 0xdf, 0x9d, 0x7f, 0x56,
	0xe9, 0x2e, 0x3a, 0xa0, 0x13, 0x87, 0xbf, 0xcd, 0xc3, 0xea, 0xf4, 0x12, 0x33, 0x4e, 0xac, 0x78,
	0x0c, 0x20, 0xfb, 0xfd, 0x6c, 0x9c, 0xda, 0x72, 0x49, 0xc3, 0x23, 0x9d, 0x58, 0xec, 0xc3, 0x46,
	0x4f, 0xf6, 0x2f, 0x07, 0x3a, 0x1b, 0xa7, 0x71, 0x14, 0xe3, 0x45, 0xa4, 0xd2, 0x18, 0x7f, 0x0a,
	0xee, 0x31, 0x51, 0x94, 0xbe, 0x63, 0xbc, 0xe8, 0x90, 0x47, 0xec, 0x41, 0xd5, 0x24, 0x99, 0x35,
	0xc1, 0xc2, 0xee, 0xc2, 0xb3, 0xa5, 0x83, 0xa5, 0xb6, 0x3b, 0xf2, 0x2c, 0xc9, 0x6c, 0xd7, 0x79,
	0xc4, 0x1e, 0x34, 0x7b, 0x32, 0x1e, 0x60, 0x94, 0x67, 0x2a, 0xb5, 0x26, 0xa8, 0xf0, 0x66, 0x4b,
	0x8c, 0x9d, 0x32, 0x14, 0xfe, 0x3a, 0x0f, 0x50, 0x2e, 0x14, 0xf7, 0xa1, 0x4e, 0x4b, 0xcb, 0x10,
	0x6b, 0x64, 0x76, 0x62, 0xb1, 0x07, 0x15, 0x63, 0xa5, 0xe5, 0x78, 0xa6, 0x0e, 0xb3, 0xd2, 0x9e,
	0xcc, 0x75, 0xd9, 0x45, 0x94, 0x21, 0xea, 0x2c, 0x58, 0x98, 0xa1, 0x9c, 0xa0, 0xce, 0x88, 0x42,
	0x2e, 0xa2, 0x28, 0x8b, 0x23, 0x0e, 0xa4, 0xa4, 0x74, 0x2c, 0x8e, 0x88, 0x42, 0xae, 0xa3, 0x3a,
	0x54, 0x69, 0x37, 0x13, 0x1e, 0x4f, 0x02, 0xa3, 0xcd, 0x29, 0x30, 0x2b, 0x27, 0x81, 0x35, 0xba,
	0x35, 0x32, 0x3b, 0x31, 0xe9, 0xca, 0x0e, 0xd3, 0xcf, 0x34, 0x7a, 0xb9, 0x1a, 0x84, 0x9c, 0x11,
	0x10, 0x1e, 0x15, 0xbb, 0x50, 0x1c, 0xb4, 0x0b, 0xc5, 0x31, 0xf5, 0x7a, 0x64, 0x76, 0x62, 0xca,
	0x27, 0x3b, 0xae, 0x55, 0x6a, 0xfc, 0x26, 0x8b, 0x04, 0x7c, 0x54, 0xa9, 0x09, 0x3f, 0x14, 0x7b,
	0x50, 0xa0, 0xe2, 0x29, 0xac, 0x18, 0xd4, 0x4a, 0x26, 0xea, 0x67, 0x8c, 0x23, 0x7e, 0x1d, 0x17,
	0xd1, 0x72, 0x09, 0x33, 0xf1, 0x3e, 0xd4, 0xc9, 0x4b, 0x87, 0xdd, 0x73, 0x21, 0x93, 0xd9, 0x89,
	0xc3, 0x57, 0xb0, 0xf9, 0x5e, 0xda, 0xfe, 0x10, 0xcd, 0x89, 0x32, 0x36, 0xd3, 0x37, 0xff, 0xaa,
	0xaa, 0x0e, 0x61, 0xe3, 0xf6, 0x2a, 0x2e, 0xac, 0x5d, 0xa8, 0x8f, 0x1c, 0x1e, 0xcc, 0x73, 0x25,
	0xd4, 0xda, 0xcc, 0xeb, 0x16, 0x70, 0xf8, 0xcb, 0x3d, 0xa8, 0x32, 0x24, 0x1e, 0xc0, 0x22, 0x83,
	0xa5, 0x8c, 0x8e, 0x34, 0xd1, 0x51, 0xdb, 0xc8, 0xaa, 0xd1, 0xb4, 0x8e, 0xda, 0x9e, 0xab, 0x11,
	0x4e, 0x2b, 0xb7, 0x30, 0xa3, 0xdc, 0x16, 0xd4, 0xae, 0x55, 0x9a, 0xa2, 0xe6, 0xa4, 0x2e, 0x76,
	0xbd, 0x45, 0xef, 0x32, 0x90, 0x23, 0x8c, 0x46, 0x59, 0x8c, 0x41, 0xd5, 0xbd, 0x0b, 0x01, 0xef,
	0xb3, 0x18, 0xe9, 0xb0, 0x24, 0xeb, 0xf5, 0x6e, 0x22, 0x7b, 0x93, 0x63, 0x50, 0x73, 0x87, 0x31,
	0x72, 0x7e, 0x93, 0xa3, 0xd8, 0x86, 0xc5, 0x78, 0xac, 0xa5, 0x55, 0x59, 0x1a, 0xd4, 0xdd, 0xd2,
	0xc2, 0xa6, 0xf3, 0x30, 0x1d, 0xa8, 0x14, 0x83, 0x45, 0x17, 0x87, 0xb3, 0xc4, 0x17, 0x20, 0x64,
	0xdf, 0xaa, 0x2b, 0x8c, 0x7a, 0xd2, 0xda, 0x04, 0xa3, 0x5c, 0x1a, 0x13, 0x34, 0x38, 0xa6, 0x55,
	0xe7, 0x39, 0x62, 0xc7, 0xa9, 0x34, 0x26, 0xdc, 0x87, 0x75, 0x56, 0xe4, 0x18, 0xad, 0x54, 0x89,
	0x29, 0x12, 0x70, 0x5b, 0x9f, 0xca, 0x44, 0x9f, 0x10, 0x41, 0xcc, 0xae, 0x60, 0xf1, 0xb7, 0xa0,
	0xa6, 0xf9, 0xa9, 0xa8, 0x27, 0x67, 0x89, 0x27, 0x50, 0xe5, 0x85, 0xbe, 0x5f, 0x5a, 0xed, 0x99,
	0xb5, 0xce, 0x27, 0x04, 0x54, 0xae, 0x32, 0x8b, 0x2c, 0x68, 0xa3, 0xcb, 0xcf, 0xe1, 0x9f, 0x35,
	0x68, 0x4e, 0x73, 0x67, 0xb4, 0x98, 0xbf, 0xa5, 0xc5, 0x23, 0x28, 0x33, 0xf4, 0x79, 0xca, 0x9e,
	0x42, 0xdd, 0x15, 0x4f, 0x31, 0x22, 0x7c, 0x14, 0xae, 0x96, 0x4d, 0xb7, 0xf0, 0xce, 0xbc, 0x75,
	0x65, 0xb6, 0x2a, 0xf6, 0xa0, 0x69, 0xb3, 0x6b, 0xd4, 0x11, 0x75, 0xd4, 0xd8, 0x04, 0xd5, 0xdd,
	0x05, 0x9a, 0x20, 0x8c, 0x9d, 0x31, 0x44, 0xfd, 0xd0, 0x93, 0x5a, 0xcb, 0xfe, 0xa5, 0x29, 0x58,
	0x35, 0x66, 0x2d, 0x17, 0xb0, 0x27, 0x06, 0x50, 0xef, 0x27, 0x63, 0x63, 0x51, 0xfb, 0xa4, 0x16,
	0xa6, 0x78, 0x06, 0xab, 0x17, 0x4a, 0x1b, 0x1b, 0xf5, 0x92, 0x2c, 0x8b, 0x5d, 0x05, 0xba, 0xec,
	0x2e, 0x33, 0x7e, 0x44, 0x30, 0xbf, 0xd3, 0x0e, 0x2c, 0x69, 0xa4, 0xb8, 0x23, 0x23, 0x13, 0xcb,
	0xe9, 0xad, 0x74, 0xc1, 0x41, 0x67, 0xd2, 0x8d, 0xd9, 0xa9, 0xca, 0x82, 0xdb, 0x95, 0xf5, 0x04,
	0x5a, 0xc3, 0xf1, 0x48, 0xa6, 0x51, 0xa1, 0xcc, 0x12, 0x33, 0x9a, 0x0c, 0x7a, 0x61, 0x48, 0xf2,
	0x04, 0xe5, 0x60, 0x8c, 0x2a, 0x0e, 0x9a, 0x4e, 0xf2, 0xc2, 0x16, 0xff, 0x85, 0xe5, 0x3c, 0x33,
	0x8a, 0x0b, 0x8d, 0x12, 0x66, 0x82, 0x16, 0x33, 0x5a, 0x05, 0xfa, 0x3d, 0x81, 0x44, 0x4b, 0x71,
	0x20, 0xa7, 0x68, 0xcb, 0x8e, 0x56, 0xa0, 0x8e, 0x36, 0xd3, 0x24, 0x2b, 0xb7, 0x9a, 0xe4, 0x4b,
	0x80, 0x5c, 0x91, 0xaa, 0x3d, 0x99, 0x9a, 0x60, 0x95, 0x53, 0xb8, 0xec, 0x53, 0xa8, 0xfa, 0x97,
	0x47, 0x32, 0x35, 0xdd, 0x06, 0x33, 0xe8, 0x91, 0x52, 0x55, 0x48, 0x63, 0xa5, 0xc5, 0x60, 0x8d,
	0x33, 0xe9, 0xe5, 0xa2, 0x14, 0x20, 0x1d, 0x47, 0x33, 0x0a, 0x0d, 0x65, 0x5a, 0xb8, 0xe3, 0x1c,
	0xd0, 0x89, 0x49, 0x5a, 0xef, 0x64, 0xe9, 0xd6, 0x9d, 0xb4, 0x0e, 0x62, 0xed, 0xca, 0xce, 0xdb,
	0x98, 0xe9, 0xbc, 0x1d, 0x58, 0x72, 0xe5, 0x73, 0x91, 0xc8, 0x81, 0x09, 0x36, 0xdd, 0x42, 0x86,
	0xbe, 0x21, 0x84, 0x5a, 0x53, 0xcb, 0x58, 0xc9, 0xd4, 0x46, 0x16, 0xe5, 0xc8, 0x8f, 0xea, 0x2d,
	0xe6, 0xad, 0x7a, 0xcf, 0x39, 0xca, 0x11, 0x4f, 0x6c, 0xf1, 0x3f, 0x58, 0x89, 0x95, 0xc6, 0x69,
	0xea, 0x7d, 0xa7, 0x1d, 0xc1, 0x25, 0xef, 0x09, 0xb4, 0xdc, 0xb1, 0xd9, 0xd8, 0xf6, 0xb3, 0x11,
	0x06, 0x01, 0xbf, 0x70, 0x93, 0xc1, 0x6f, 0x1d, 0x26, 0xfe, 0x0f, 0x6b, 0xb9, 0xc6, 0x88, 0x45,
	0x9e, 0xb4, 0xd1, 0x03, 0xde, 0x6e, 0x25, 0xd7, 0xf8, 0x4e, 0x8e, 0xf0, 0xd8, 0xc3, 0xe1, 0x1f,
	0x75, 0xdf, 0x7a, 0x45, 0x1d, 0xfc, 0xc3, 0x27, 0x7b, 0x07, 0x96, 0xfc, 0xb4, 0xa6, 0x6f, 0xa4,
	0xef, 0x3f, 0xc8, 0x67, 0x3e, 0xa6, 0x77, 0xcf, 0xcc, 0x4d, 0xe0, 0x4f, 0x41, 0xb4, 0xef, 0xbf,
	0xc8, 0x55, 0xb2, 0xf6, 0x27, 0xf0, 0x0b, 0x3f, 0x2f, 0x19, 0x7e, 0x31, 0x81, 0x0f, 0xfc, 0xa0,
	0x64, 0xf8, 0x60, 0x02, 0xbf, 0xf4, 0xdd, 0xc4, 0xf0, 0xcb, 0x09, 0xfc, 0xca, 0x77, 0x10, 0xc3,
	0xaf, 0x26, 0xf0, 0x6b, 0xdf, 0x33, 0x0c, 0xbf, 0x16, 0x1b, 0x50, 0xbd, 0x54, 0x49, 0x62, 0x7c,
	0xa7, 0x38, 0x83, 0x32, 0x1d, 0xa3, 0xb4, 0xc3, 0xa2, 0x3d, 0xbc, 0x45, 0xb8, 0x34, 0x46, 0x59,
	0xe3, 0xdb, 0xc2, 0x5b, 0x94, 0x8a, 0x04, 0xe5, 0x55, 0x39, 0x26, 0x5c, 0x4f, 0x34, 0x1d, 0xe8,
	0xdb, 0x5f, 0x40, 0x65, 0x90, 0x25, 0xb1, 0x6f, 0x04, 0x7e, 0xa6, 0x82, 0x4c, 0xa4, 0xb1, 0xd1,
	0x90, 0xf6, 0xf4, 0xf5, 0x4f, 0xc0, 0x09, 0xed, 0xca, 0x51, 0xa4, 0x0a, 0xa9, 0xf6, 0x7d, 0x14,
	0x64, 0x89, 0x5d, 0x68, 0xd2, 0xe2, 0x28, 0x47, 0x1d, 0x8d, 0x54, 0xca, 0x85, 0x5e, 0xe9, 0x02,
	0x61, 0xa7, 0xa8, 0xdf, 0x2b, 0x9a, 0x8b, 0xf0, 0xe9, 0x74, 0xe2, 0xf7, 0x85, 0xfe, 0xe9, 0xd4,
	0x7b, 0x1f, 0x03, 0x73, 0x23, 0x93, 0x63, 0x6a, 0x7d, 0x9d, 0x37, 0x08, 0x39, 0x23, 0x80, 0xd2,
	0xca, 0x59, 0x8b, 0xe5, 0x48, 0x0e, 0x8a, 0x5a, 0x07, 0x82, 0x8e, 0x19, 0x29, 0x67, 0xa2, 0x67,
	0xb8, 0x82, 0x77, 0x33, 0xb1, 0xa4, 0xf0, 0x1e, 0x43, 0x94, 0x89, 0x4a, 0x07, 0xbe, 0xd6, 0x79,
	0xdf, 0x13, 0x07, 0x91, 0xf2, 0x09, 0x5e, 0x61, 0xe2, 0x8b, 0xdb, 0x19, 0x53, 0x35, 0x95, 0xca,
	0x49, 0x49, 0xfb, 0x9a, 0xfa, 0x20, 0x47, 0x48, 0xb3, 0x3a, 0x97, 0xda, 0xde, 0x50, 0x51, 0x3d,
	0x70, 0xb3, 0x9a, 0xed, 0x4e, 0xfc, 0x37, 0x5f, 0xc0, 0xed, 0xbb, 0xbf, 0x80, 0x24, 0x7d, 0x8a,
	0x36, 0xba, 0xce, 0xb4, 0x1d, 0x06, 0x0f, 0x9d, 0x44, 0x29, 0xda, 0x8f, 0x64, 0xd3, 0x56, 0xa6,
	0x2f, 0x13, 0x8c, 0xa3, 0x69, 0x29, 0x1e, 0xb9, 0x8e, 0x75, 0x9e, 0x93, 0x52, 0x90, 0x36, 0xac,
	0x7b, 0xf6, 0x8c, 0x2e, 0x8f, 0x99, 0xbe, 0xe6, 0x5c, 0xe7, 0x53, 0xea, 0x94, 0xfc, 0x19, 0x91,
	0xfe, 0x33, 0xcd, 0x3f, 0x99, 0x92, 0xaa, 0xa8, 0xdd, 0x37, 0xc1, 0x4e, 0x59, 0xbb, 0x6f, 0x26,
	0xf0, 0xdb, 0x60, 0xb7, 0x84, 0xdf, 0x4e, 0xe0, 0xc3, 0x60, 0xaf, 0x84, 0x0f, 0xc3, 0xef, 0xa0,
	0x35, 0x33, 0x3a, 0xf9, 0x7a, 0x66, 0x22, 0x9a, 0x9f, 0xdc, 0xda, 0x8b, 0xdd, 0x9a, 0x32, 0xe4,
	0xa4, 0x42, 0xa5, 0xd9, 0xc3, 0x0d, 0xbd, 0xd0, 0xe5, 0xe7, 0xdb, 0xad, 0xbc, 0x50, 0xb4, 0xf2,
	0xc1, 0xef, 0xf3, 0x00, 0x47, 0x99, 0x3d, 0x43, 0x7d, 0xa5, 0xfa, 0x28, 0x0e, 0xa1, 0xf5, 0x0e,
	0x6d, 0x79, 0xf9, 0x17, 0xa2, 0xfd, 0xd9, 0xcf, 0xc3, 0xf6, 0x5a, 0xfb, 0xf6, 0xdf, 0x41, 0x38,
	0x27, 0x8e, 0x61, 0xed, 0x1d, 0xda, 0xd9, 0x1b, 0x9e, 0xd8, 0x6a, 0xdf, 0x79, 0x51, 0xdc, 0xde,
	0x6c, 0xdf, 0x75, 0x15, 0x0c, 0xe7, 0xc4, 0x57, 0xb0, 0x52, 0xec, 0x52, 0x5c, 0x20, 0x36, 0xda,
	0x77, 0xdc, 0x74, 0xb6, 0xd7, 0xdb, 0x9f, 0xdf, 0x66, 0xc2, 0xb9, 0xa3, 0x95, 0x1f, 0x5a, 0x66,
	0x28, 0x35, 0xc6, 0xcf, 0xf3, 0xde, 0xf3, 0x5e, 0x66, 0x7b, 0x35, 0xfe, 0x09, 0x7a, 0xf9, 0x57,
	0x00, 0x00, 0x00, 0xff, 0xff, 0xc2, 0xad, 0x0b, 0x62, 0x11, 0x0d, 0x00, 0x00,
}
